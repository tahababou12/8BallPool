!function(t){var e={};function s(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,s),o.l=!0,o.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)s.d(i,o,function(e){return t[e]}.bind(null,o));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=8)}([function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GAME_CONFIG={GAME_WIDTH:1500,GAME_HEIGHT:825,RED_BALLS_POSITIONS:[{x:1056,y:433},{x:1090,y:374},{x:1126,y:393},{x:1126,y:472},{x:1162,y:335},{x:1162,y:374},{x:1162,y:452}],YELLOW_BALLS_POSITIONS:[{x:1022,y:413},{x:1056,y:393},{x:1090,y:452},{x:1126,y:354},{x:1126,y:433},{x:1162,y:413},{x:1162,y:491}],CUE_BALL_POSITION:{x:413,y:413},EIGHT_BALL_POSITION:{x:1090,y:413},SPRITES_BASE_PATH:"assets/sprites/",SPRITES:{MAIN_MENU_BACKGROUND:"main_menu_background.png",TABLE:"spr_background4.png",CUE_BALL:"spr_ball2.png",RED_BALL:"spr_redBall2.png",YELLOW_BALL:"spr_yellowBall2.png",BLACK_BALL:"spr_blackBall2.png",STICK:"spr_stick.png",TWO_PLAYERS_BUTTON:"2_players_button.png",TWO_PLAYERS_BUTTON_HOVERED:"2_players_button_hover.png",ONE_PLAYER_BUTTON:"1_player_button.png",ONE_PLAYER_BUTTON_HOVERED:"1_player_button_hover.png",MUTE_BUTTON:"mute_button.png",MUTE_BUTTON_HOVERED:"mute_button_hover.png",MUTE_BUTTON_PRESSED:"mute_button_pressed.png",MUTE_BUTTON_PRESSED_HOVERED:"mute_button_pressed_hover.png",EASY_BUTTON:"easy_button.png",EASY_BUTTON_HOVERED:"easy_button_hover.png",MEDIUM_BUTTON:"medium_button.png",MEDIUM_BUTTON_HOVERED:"medium_button_hover.png",HARD_BUTTON:"hard_button.png",HARD_BUTTON_HOVERED:"hard_button_hover.png",BACK_BUTTON:"back_button.png",BACK_BUTTON_HOVERED:"back_button_hover.png",CONTINUE_BUTTON:"continue_button.png",CONTINUE_BUTTON_HOVERED:"continue_button_hover.png",INSANE_BUTTON:"insane_button.png",INSANE_BUTTON_HOVERED:"insane_button_hover.png",ABOUT_BUTTON:"about_button.png",ABOUT_BUTTON_HOVERED:"about_button_hover.png",CONTROLS:"controls.png"},AUDIO_BASE_PATH:"assets/sounds/",FRICTION:.0208,COLLISION_LOSS:.0208,CUSHION_WIDTH:60,POCKET_RADIUS:48,POCKETS_POSITIONS:[{x:62,y:62},{x:750,y:32},{x:1435,y:62},{x:62,y:762},{x:750,y:794},{x:1435,y:762}],BALL_DIAMETER:38,BALL_ORIGIN:{x:25,y:25},BALL_MIN_VELOCITY_LENGTH:.05,STICK_ORIGIN:{x:970,y:11},STICK_SHOT_ORIGIN:{x:950,y:11},POWER_TO_ADD_PER_FRAME:1,STICK_MOVEMENT_PER_FRAME:2,STICK_MAX_POWER:70,SHOOT_MOUSE_BUTTON:0,INCREASE_SHOT_POWER_KEY:87,DECREASE_SHOT_POWER_KEY:83,TIMEOUT_TO_HIDE_STICK_AFTER_SHOT:500,TIMOUT_TO_HIDE_BALL_AFTER_POCKET:100}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),o=s(2);const n=document.getElementById("screen"),_=document.getElementById("gameArea");e.Canvas2D=new class{get scaleX(){return this._scale.x}get scaleY(){return this._scale.y}get offsetX(){return this._offset.x}get offsetY(){return this._offset.y}constructor(t,e){this._canvasContainer=e,this._canvas=t,this._context=this._canvas.getContext("2d"),this.resizeCanvas()}resizeCanvas(){const t=i.GAME_CONFIG.GAME_WIDTH,e=i.GAME_CONFIG.GAME_HEIGHT,s=t/e;let n=window.innerHeight,_=window.innerWidth;_/n>s?_=n*s:n=_/s,this._canvasContainer.style.width=_+"px",this._canvasContainer.style.height=n+"px",this._canvasContainer.style.marginTop=(window.innerHeight-n)/2+"px",this._canvasContainer.style.marginLeft=(window.innerWidth-_)/2+"px",this._canvasContainer.style.marginBottom=(window.innerHeight-n)/2+"px",this._canvasContainer.style.marginRight=(window.innerWidth-_)/2+"px",this._scale=new o.Vector2(_/t,n/e),this._canvas.width=_,this._canvas.height=n,this._canvas.offsetParent&&(this._offset=new o.Vector2(this._canvas.offsetLeft,this._canvas.offsetTop))}clear(){this._context.clearRect(0,0,this._canvas.width,this._canvas.height)}drawImage(t,e=o.Vector2.zero,s=0,i=o.Vector2.zero){this._context.save(),this._context.scale(this._scale.x,this._scale.y),this._context.translate(e.x,e.y),this._context.rotate(s),this._context.drawImage(t,0,0,t.width,t.height,-i.x,-i.y,t.width,t.height),this._context.restore()}drawText(t,e,s,i,o="left"){this._context.save(),this._context.fillStyle=s,this._context.font=e,this._context.textAlign=o,this._context.fillText(t,i.x,i.y),this._context.restore()}}(n,_),window.addEventListener("resize",e.Canvas2D.resizeCanvas.bind(e.Canvas2D))},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t,e){this._x=t,this._y=e}get x(){return this._x}get y(){return this._y}static get zero(){return new i(0,0)}get length(){return Math.sqrt(Math.pow(this._x,2)+Math.pow(this._y,2))}static copy(t){return new i(t.x,t.y)}addX(t){return new i(this._x,this._y).addToX(t)}addY(t){return new i(this._x,this._y).addToY(t)}addToX(t){return this._x+=t,this}addToY(t){return this._y+=t,this}addTo(t){return this.addToX(t.x).addToY(t.y)}add(t){return new i(this._x,this._y).addTo(t)}subtractTo(t){return this._x-=t.x,this._y-=t.y,this}subtract(t){return new i(this._x,this._y).subtractTo(t)}mult(t){return new i(this._x,this._y).multBy(t)}multBy(t){return this._x*=t,this._y*=t,this}dot(t){return this._x*t.x+this._y*t.y}distFrom(t){return this.subtract(t).length}}e.Vector2=i},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0);e.Assets=new class{constructor(){this.sprites=new Map}async loadGameAssets(){await this.loadGameSprites()}getSprite(t){return this.sprites.get(t)}loadSprite(t){const e=new Image;return this.sprites.set(t,e),new Promise(s=>{e.onload=(()=>s()),e.src=i.GAME_CONFIG.SPRITES_BASE_PATH+t})}async loadGameSprites(){const t=Object.values(i.GAME_CONFIG.SPRITES).map(this.loadSprite.bind(this));await Promise.all(t)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(6),o=s(1),n=s(2);e.Mouse=new class{constructor(){this._buttonStates=[];for(let t=0;t<3;t++)this._buttonStates[t]=new i.ButtonState;this._position=n.Vector2.zero,document.addEventListener("mousemove",t=>this.handleMouseMove(t)),document.addEventListener("mousedown",t=>this.handleMouseDown(t)),document.addEventListener("mouseup",t=>this.handleMouseUp(t))}get posX(){return this._position.x}get posY(){return this._position.y}handleMouseMove(t){const e=(t.pageX-o.Canvas2D.offsetX)/o.Canvas2D.scaleX,s=(t.pageY-o.Canvas2D.offsetY)/o.Canvas2D.scaleY;this._position=new n.Vector2(e,s)}handleMouseDown(t){this._buttonStates[t.button].down=!0,this._buttonStates[t.button].pressed=!0}handleMouseUp(t){this._buttonStates[t.button].down=!1}reset(){for(let t=0;t<3;t++)this._buttonStates[t].pressed=!1}isDown(t){return this._buttonStates[t].down}isPressed(t){return this._buttonStates[t].pressed}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(6);e.Keyboard=new class{constructor(){this._keyStates=[];for(let t=0;t<256;t++)this._keyStates[t]=new i.ButtonState;document.addEventListener("keyup",t=>this.handleKeyUp(t)),document.addEventListener("keydown",t=>this.handleKeyDown(t))}handleKeyUp(t){this._keyStates[t.keyCode].down=!1}handleKeyDown(t){this._keyStates[t.keyCode].pressed=!1,this._keyStates[t.keyCode].down=!0}reset(){for(let t=0;t<256;t++)this._keyStates[t].pressed=!1}isDown(t){return this._keyStates[t].down}isPressed(t){return this._keyStates[t].pressed}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.ButtonState=class{constructor(){this.down=!1,this.pressed=!1}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.white=0]="white",t[t.black=1]="black",t[t.red=2]="red",t[t.yellow=3]="yellow"}(e.Color||(e.Color={}))},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(3),o=s(9),n=s(5),_=s(1),r=s(4);let a;function h(){a.update(),n.Keyboard.reset(),r.Mouse.reset(),_.Canvas2D.clear(),a.draw(),requestAnimationFrame(h)}!async function(){await i.Assets.loadGameAssets(),a=new o.GameWorld,h()}()},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(10),o=s(7),n=s(2),_=s(0),r=s(3),a=s(1),h=s(11),l=s(4);e.GameWorld=class{constructor(){this._redBalls=_.GAME_CONFIG.RED_BALLS_POSITIONS.map(t=>new h.Ball(n.Vector2.copy(t),o.Color.yellow)),this._yellowBalls=_.GAME_CONFIG.YELLOW_BALLS_POSITIONS.map(t=>new h.Ball(n.Vector2.copy(t),o.Color.red)),this._cueBall=new h.Ball(n.Vector2.copy(_.GAME_CONFIG.CUE_BALL_POSITION),o.Color.white),this._8Ball=new h.Ball(n.Vector2.copy(_.GAME_CONFIG.EIGHT_BALL_POSITION),o.Color.black),this._stick=new i.Stick(n.Vector2.copy(_.GAME_CONFIG.CUE_BALL_POSITION)),this._balls=[this._cueBall,...this._redBalls,...this._yellowBalls,this._8Ball].sort((t,e)=>t.position.x-e.position.x),console.log(this._balls)}shootCueBall(){this._stick.power>0&&(this._stick.shoot(),this._cueBall.shoot(this._stick.power,this._stick.rotation),this._stick.movable=!1,setTimeout(()=>this._stick.hide(),_.GAME_CONFIG.TIMEOUT_TO_HIDE_STICK_AFTER_SHOT))}handleInput(){l.Mouse.isPressed(_.GAME_CONFIG.SHOOT_MOUSE_BUTTON)&&this.shootCueBall()}handleCollisions(){for(let t=0;t<this._balls.length;t++)for(let e=t+1;e<this._balls.length;e++){const s=this._balls[t],i=this._balls[e];s.collideWithBall(i)}}ballsMoving(){return this._balls.some(t=>t.moving)}nextTurn(){this._stick.relocate(this._cueBall.position)}update(){this.handleCollisions(),this.handleInput(),this._stick.update(),this._balls.forEach(t=>t.update()),this.ballsMoving()||this._stick.visible||this.nextTurn()}draw(){a.Canvas2D.drawImage(r.Assets.getSprite(_.GAME_CONFIG.SPRITES.TABLE)),this._redBalls.forEach(t=>t.draw()),this._yellowBalls.forEach(t=>t.draw()),this._8Ball.draw(),this._cueBall.draw(),this._stick.draw()}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(5),o=s(4),n=s(0),_=s(3),r=s(1),a=s(2);e.Stick=class{constructor(t){this._position=t,this._power=0,this._movable=!0,this._visible=!0,this._sprite=_.Assets.getSprite(n.GAME_CONFIG.SPRITES.STICK),this._origin=a.Vector2.copy(n.GAME_CONFIG.STICK_ORIGIN)}get rotation(){return this._rotation}get power(){return this._power}set movable(t){this._movable=t}get visible(){return this._visible}increasePower(){this._power+=n.GAME_CONFIG.POWER_TO_ADD_PER_FRAME,this._origin.addToX(n.GAME_CONFIG.STICK_MOVEMENT_PER_FRAME)}decreasePower(){this._power-=n.GAME_CONFIG.POWER_TO_ADD_PER_FRAME,this._origin.addToX(-n.GAME_CONFIG.STICK_MOVEMENT_PER_FRAME)}isLessThanMaxDistance(){return this._power<=n.GAME_CONFIG.STICK_MAX_POWER}isMoreThanMinDistance(){return this._power>=0}updateDistance(){i.Keyboard.isDown(n.GAME_CONFIG.INCREASE_SHOT_POWER_KEY)&&this.isLessThanMaxDistance()?this.increasePower():i.Keyboard.isDown(n.GAME_CONFIG.DECREASE_SHOT_POWER_KEY)&&this.isMoreThanMinDistance()&&this.decreasePower()}updateRotation(){const t=o.Mouse.posY-this._position.y,e=o.Mouse.posX-this._position.x;this._rotation=Math.atan2(t,e)}hide(){this._power=0,this._visible=!1}shoot(){this._origin=a.Vector2.copy(n.GAME_CONFIG.STICK_SHOT_ORIGIN)}relocate(t){this._position=t,this._origin=a.Vector2.copy(n.GAME_CONFIG.STICK_ORIGIN),this._movable=!0,this._visible=!0}update(){this._movable&&(this.updateRotation(),this.updateDistance())}draw(){this._visible&&r.Canvas2D.drawImage(this._sprite,this._position,this._rotation,this._origin)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),o=s(1),n=s(7),_=s(2),r=s(3);e.Ball=class{constructor(t,e){this._position=t,this._velocity=_.Vector2.zero,this._moving=!1,this._visible=!0,this.resolveSprite(e)}get velocity(){return this._velocity}set velocity(t){this._velocity=t}get position(){return _.Vector2.copy(this._position)}set position(t){this._position=t}get moving(){return this._moving}resolveSprite(t){switch(t){case n.Color.white:this._sprite=r.Assets.getSprite(i.GAME_CONFIG.SPRITES.CUE_BALL);break;case n.Color.black:this._sprite=r.Assets.getSprite(i.GAME_CONFIG.SPRITES.BLACK_BALL);break;case n.Color.red:this._sprite=r.Assets.getSprite(i.GAME_CONFIG.SPRITES.RED_BALL);break;case n.Color.yellow:this._sprite=r.Assets.getSprite(i.GAME_CONFIG.SPRITES.YELLOW_BALL)}}handleBallInPocket(){i.GAME_CONFIG.POCKETS_POSITIONS.some(t=>this._position.distFrom(t)<=i.GAME_CONFIG.POCKET_RADIUS)&&(this._velocity=_.Vector2.zero,setTimeout(()=>{this._moving=!1,this._visible=!1},i.GAME_CONFIG.TIMOUT_TO_HIDE_BALL_AFTER_POCKET))}handleCollisionWithCushion(){const t=i.GAME_CONFIG.BALL_DIAMETER/2,e=this.position.y-t,s=this.position.x-t,o=this.position.x+t,n=this.position.y+t;e<=i.GAME_CONFIG.CUSHION_WIDTH&&(this._position.addToY(i.GAME_CONFIG.CUSHION_WIDTH-this._position.y+t),this.velocity=new _.Vector2(this.velocity.x,-this.velocity.y)),s<=i.GAME_CONFIG.CUSHION_WIDTH&&(this._position.addToX(i.GAME_CONFIG.CUSHION_WIDTH-this._position.x+t),this.velocity=new _.Vector2(-this.velocity.x,this.velocity.y)),o>=i.GAME_CONFIG.GAME_WIDTH-i.GAME_CONFIG.CUSHION_WIDTH&&(this._position.addToX(i.GAME_CONFIG.GAME_WIDTH-i.GAME_CONFIG.CUSHION_WIDTH-this._position.x-t),this.velocity=new _.Vector2(-this.velocity.x,this.velocity.y)),n>=i.GAME_CONFIG.GAME_HEIGHT-i.GAME_CONFIG.CUSHION_WIDTH&&(this._position.addToY(i.GAME_CONFIG.GAME_HEIGHT-i.GAME_CONFIG.CUSHION_WIDTH-this._position.y-t),this.velocity=new _.Vector2(this.velocity.x,-this.velocity.y))}collideWithBall(t){if(!this._visible||!t._visible)return;const e=this._position.subtract(t._position),s=e.length;if(s>i.GAME_CONFIG.BALL_DIAMETER)return;const o=e.mult((i.GAME_CONFIG.BALL_DIAMETER-s)/s);this._position.addTo(o.mult(.5)),t.position=t.position.subtract(o.mult(.5));const n=e.mult(1/e.length),r=new _.Vector2(-n.y,n.x),a=n.dot(this._velocity),h=r.dot(this._velocity),l=n.dot(t.velocity),c=r.dot(t.velocity),u=n.mult(l),d=r.mult(h),E=n.mult(a),O=r.mult(c);this._velocity=u.add(d),t.velocity=E.add(O),this._moving=!0,t._moving=!0,this.velocity.multBy(1-i.GAME_CONFIG.COLLISION_LOSS),t.velocity=t.velocity.mult(1-i.GAME_CONFIG.COLLISION_LOSS)}shoot(t,e){this._velocity=new _.Vector2(t*Math.cos(e),t*Math.sin(e)),this._moving=!0}update(){this._moving&&(this.handleBallInPocket(),this.handleCollisionWithCushion(),this._velocity.multBy(1-i.GAME_CONFIG.FRICTION),this._position.addTo(this._velocity),this._velocity.length<i.GAME_CONFIG.BALL_MIN_VELOCITY_LENGTH&&(this.velocity=_.Vector2.zero,this._moving=!1))}draw(){this._visible&&o.Canvas2D.drawImage(this._sprite,this._position,0,i.GAME_CONFIG.BALL_ORIGIN)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,