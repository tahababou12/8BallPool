!function(t){var e={};function s(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,s),o.l=!0,o.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)s.d(i,o,function(e){return t[e]}.bind(null,o));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=10)}([function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(6);e.GAME_CONFIG={GAME_WIDTH:1500,GAME_HEIGHT:825,RED_BALLS_POSITIONS:[{x:1056,y:433},{x:1090,y:374},{x:1126,y:393},{x:1126,y:472},{x:1162,y:335},{x:1162,y:374},{x:1162,y:452}],YELLOW_BALLS_POSITIONS:[{x:1022,y:413},{x:1056,y:393},{x:1090,y:452},{x:1126,y:354},{x:1126,y:433},{x:1162,y:413},{x:1162,y:491}],CUE_BALL_POSITION:{x:413,y:413},EIGHT_BALL_POSITION:{x:1090,y:413},MATCH_SCORE_POSITIONS:[{x:420,y:27},{x:932,y:27}],MATCH_SCORE_MARGIN:20,OVERALL_SCORE_LABELS_POSITIONS:[{x:628,y:460},{x:778,y:460}],OVERALL_SCORE_LABEL_FONT:"200px Impact",OVERALL_SCORE_LABEL_COLOR:"#126736",OVERALL_SCORE_LABEL_ALIGNMENT:"top",SPRITES_BASE_PATH:"assets/sprites/",SPRITES:{MAIN_MENU_BACKGROUND:"main_menu_background.png",TABLE:"spr_background4.png",CUE_BALL:"spr_ball2.png",RED_BALL:"spr_redBall2.png",YELLOW_BALL:"spr_yellowBall2.png",BLACK_BALL:"spr_blackBall2.png",STICK:"spr_stick.png",TWO_PLAYERS_BUTTON:"2_players_button.png",TWO_PLAYERS_BUTTON_HOVERED:"2_players_button_hover.png",ONE_PLAYER_BUTTON:"1_player_button.png",ONE_PLAYER_BUTTON_HOVERED:"1_player_button_hover.png",MUTE_BUTTON:"mute_button.png",MUTE_BUTTON_HOVERED:"mute_button_hover.png",MUTE_BUTTON_PRESSED:"mute_button_pressed.png",MUTE_BUTTON_PRESSED_HOVERED:"mute_button_pressed_hover.png",EASY_BUTTON:"easy_button.png",EASY_BUTTON_HOVERED:"easy_button_hover.png",MEDIUM_BUTTON:"medium_button.png",MEDIUM_BUTTON_HOVERED:"medium_button_hover.png",HARD_BUTTON:"hard_button.png",HARD_BUTTON_HOVERED:"hard_button_hover.png",BACK_BUTTON:"back_button.png",BACK_BUTTON_HOVERED:"back_button_hover.png",CONTINUE_BUTTON:"continue_button.png",CONTINUE_BUTTON_HOVERED:"continue_button_hover.png",INSANE_BUTTON:"insane_button.png",INSANE_BUTTON_HOVERED:"insane_button_hover.png",ABOUT_BUTTON:"about_button.png",ABOUT_BUTTON_HOVERED:"about_button_hover.png",CONTROLS:"controls.png",RED_SCORE:"red_score.png",YELLOW_SCORE:"yellow_score.png"},SOUNDS_BASE_PATH:"assets/sounds/",SOUNDS:{BALLS_COLLIDE:"BallsCollide.wav",STRIKE:"Strike.wav",RAIL:"Hole.wav",MUSIC:"Bossa Antigua.mp3"},FRICTION:.0208,COLLISION_LOSS:.0208,CUSHION_WIDTH:57,POCKET_RADIUS:48,POCKETS_POSITIONS:[{x:62,y:62},{x:750,y:32},{x:1435,y:62},{x:62,y:762},{x:750,y:794},{x:1435,y:762}],CURRENT_PLAYER_LABEL_POSITION:{x:640,y:260},CURRENT_PLAYER_LABEL_COLOR:"#126736",CURRENT_PLAYER_LABEL:"PLAYER ",CURRENT_PLAYER_LABEL_FONT:"70px Impact",CURRENT_PLAYER_LABEL_ALIGNMENT:"top",BALL_DIAMETER:38,BALL_ORIGIN:{x:25,y:25},BALL_MIN_VELOCITY_LENGTH:.05,MAX_BALL_EXPECTED_VELOCITY:200,MAX_BALL_EXPECTED_COLLISION_FORCE:100,STICK_ORIGIN:{x:970,y:11},STICK_SHOT_ORIGIN:{x:950,y:11},POWER_TO_ADD_PER_FRAME:1,STICK_MOVEMENT_PER_FRAME:2,STICK_MAX_POWER:65,SELECT_MOUSE_BUTTON:0,SHOOT_MOUSE_BUTTON:0,PLACE_BALL_IN_HAND_MOUSE_BUTTON:0,INCREASE_SHOT_POWER_KEY:87,DECREASE_SHOT_POWER_KEY:83,BACK_TO_MENU_KEY:27,TIMEOUT_TO_HIDE_STICK_AFTER_SHOT:500,TIMOUT_TO_HIDE_BALL_AFTER_POCKET:100,LOADING_SCREEN_TIMEOUT:5e3,MAIN_MENU_CONFIG:{LABELS:[{text:"Classic 8-Ball",position:{x:100,y:100},font:"100px Bookman",color:"white",alignment:"left"},{text:`© ${(new Date).getFullYear()} Chen Shmilovich`,position:{x:1250,y:800},font:"20px Bookman",color:"white",alignment:"left"}],BUTTONS:[{action:i.MenuActionType.PVP,position:{x:200,y:200},sprite:"TWO_PLAYERS_BUTTON",spriteOnHover:"TWO_PLAYERS_BUTTON_HOVERED"},{action:i.MenuActionType.GoToSubMenu,value:0,position:{x:200,y:400},sprite:"ONE_PLAYER_BUTTON",spriteOnHover:"ONE_PLAYER_BUTTON_HOVERED"},{action:i.MenuActionType.ToggleSound,position:{x:1430,y:10},sprite:"MUTE_BUTTON",spriteOnHover:"MUTE_BUTTON_HOVERED"}],SUB_MENUS:[{LABELS:[{text:"Choose Difficulty",position:{x:100,y:100},font:"100px Bookman",color:"white",alignment:"left"},{text:`© ${(new Date).getFullYear()} Chen Shmilovich`,position:{x:1250,y:800},font:"20px Bookman",color:"white",alignment:"left"}],BUTTONS:[{action:i.MenuActionType.GoToPreviousMenu,position:{x:100,y:150},sprite:"BACK_BUTTON",spriteOnHover:"BACK_BUTTON_HOVERED"},{action:i.MenuActionType.ToggleSound,position:{x:1430,y:10},sprite:"MUTE_BUTTON",spriteOnHover:"MUTE_BUTTON_HOVERED"}],SUB_MENUS:[]}]},DEFAULT_CURSOR:"default",BUTTON_CURSOR:"pointer",LOADING_SCREEN_IMAGE_POSITION:{x:450,y:112.5},SOUND_ON:!0}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),o=s(3);const n=document.getElementById("screen"),_=document.getElementById("gameArea");e.Canvas2D=new class{get scaleX(){return this._scale.x}get scaleY(){return this._scale.y}get offsetX(){return this._offset.x}get offsetY(){return this._offset.y}constructor(t,e){this._canvasContainer=e,this._canvas=t,this._context=this._canvas.getContext("2d"),this.resizeCanvas()}resizeCanvas(){const t=i.GAME_CONFIG.GAME_WIDTH,e=i.GAME_CONFIG.GAME_HEIGHT,s=t/e;let n=window.innerHeight,_=window.innerWidth;_/n>s?_=n*s:n=_/s,this._canvasContainer.style.width=_+"px",this._canvasContainer.style.height=n+"px",this._canvasContainer.style.marginTop=(window.innerHeight-n)/2+"px",this._canvasContainer.style.marginLeft=(window.innerWidth-_)/2+"px",this._canvasContainer.style.marginBottom=(window.innerHeight-n)/2+"px",this._canvasContainer.style.marginRight=(window.innerWidth-_)/2+"px",this._scale=new o.Vector2(_/t,n/e),this._canvas.width=_,this._canvas.height=n,this._canvas.offsetParent&&(this._offset=new o.Vector2(this._canvas.offsetLeft,this._canvas.offsetTop))}clear(){this._context.clearRect(0,0,this._canvas.width,this._canvas.height)}drawImage(t,e=o.Vector2.zero,s=0,i=o.Vector2.zero){this._context.save(),this._context.scale(this._scale.x,this._scale.y),this._context.translate(e.x,e.y),this._context.rotate(s),this._context.drawImage(t,0,0,t.width,t.height,-i.x,-i.y,t.width,t.height),this._context.restore()}drawText(t,e,s,i,o="left"){this._context.save(),this._context.scale(this._scale.x,this._scale.y),this._context.fillStyle=s,this._context.font=e,this._context.textAlign=o,this._context.fillText(t,i.x,i.y),this._context.restore()}changeCursor(t){this._canvas.style.cursor=t}}(n,_),window.addEventListener("resize",e.Canvas2D.resizeCanvas.bind(e.Canvas2D))},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0);e.Assets=new class{constructor(){this._sprites=new Map,this._sounds=new Map}async loadGameAssets(){await this.loadGameSprites(),await this.loadGameSounds()}getSprite(t){return this._sprites.get(t)}getSound(t){return this._sounds.get(t).cloneNode(!0)}playSound(t,e){if(i.GAME_CONFIG.SOUND_ON){const s=this.getSound(t);s.volume=e,s.play()}}loadSprite(t){const e=new Image;return this._sprites.set(t,e),new Promise(s=>{e.onload=(()=>s()),e.src=i.GAME_CONFIG.SPRITES_BASE_PATH+t})}async loadGameSprites(){const t=Object.values(i.GAME_CONFIG.SPRITES).map(this.loadSprite.bind(this));await Promise.all(t)}loadSound(t){const e=new Audio;return this._sounds.set(t,e),new Promise(s=>{e.src=i.GAME_CONFIG.SOUNDS_BASE_PATH+t,s()})}async loadGameSounds(){const t=Object.values(i.GAME_CONFIG.SOUNDS).map(this.loadSound.bind(this));await Promise.all(t)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t,e){this._x=t,this._y=e}get x(){return this._x}get y(){return this._y}static get zero(){return new i(0,0)}get length(){return Math.sqrt(Math.pow(this._x,2)+Math.pow(this._y,2))}static copy(t){return new i(t.x,t.y)}addX(t){return new i(this._x,this._y).addToX(t)}addY(t){return new i(this._x,this._y).addToY(t)}addToX(t){return this._x+=t,this}addToY(t){return this._y+=t,this}addTo(t){return this.addToX(t.x).addToY(t.y)}add(t){return new i(this._x,this._y).addTo(t)}subtractTo(t){return this._x-=t.x,this._y-=t.y,this}subtract(t){return new i(this._x,this._y).subtractTo(t)}mult(t){return new i(this._x,this._y).multBy(t)}multBy(t){return this._x*=t,this._y*=t,this}dot(t){return this._x*t.x+this._y*t.y}distFrom(t){return this.subtract(t).length}}e.Vector2=i},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(7),o=s(1),n=s(3);e.Mouse=new class{constructor(){this._buttonStates=[];for(let t=0;t<3;t++)this._buttonStates[t]=new i.ButtonState;this._position=n.Vector2.zero,document.addEventListener("mousemove",t=>this.handleMouseMove(t)),document.addEventListener("mousedown",t=>this.handleMouseDown(t)),document.addEventListener("mouseup",t=>this.handleMouseUp(t))}get position(){return n.Vector2.copy(this._position)}handleMouseMove(t){const e=(t.pageX-o.Canvas2D.offsetX)/o.Canvas2D.scaleX,s=(t.pageY-o.Canvas2D.offsetY)/o.Canvas2D.scaleY;this._position=new n.Vector2(e,s)}handleMouseDown(t){this._buttonStates[t.button].down=!0,this._buttonStates[t.button].pressed=!0}handleMouseUp(t){this._buttonStates[t.button].down=!1}reset(){for(let t=0;t<3;t++)this._buttonStates[t].pressed=!1}isDown(t){return this._buttonStates[t].down}isPressed(t){return this._buttonStates[t].pressed}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.white="#BABABA",t.black="#2B2B2B",t.red="#B62A2F",t.yellow="#FECA34"}(e.Color||(e.Color={}))},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.CONTINUE=0]="CONTINUE",t[t.PVP=1]="PVP",t[t.PVC=2]="PVC",t[t.ToggleSound=3]="ToggleSound",t[t.GoToSubMenu=4]="GoToSubMenu",t[t.GoToPreviousMenu=5]="GoToPreviousMenu"}(e.MenuActionType||(e.MenuActionType={}))},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.ButtonState=class{constructor(){this.down=!1,this.pressed=!1}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.mapRange=((t,e,s,i,o)=>{let n=(t-e)*(o-i)/(s-e)+i;return n=(n=n<i?i:n)>o?o:n})},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(7);e.Keyboard=new class{constructor(){this._keyStates=[];for(let t=0;t<256;t++)this._keyStates[t]=new i.ButtonState;document.addEventListener("keyup",t=>this.handleKeyUp(t)),document.addEventListener("keydown",t=>this.handleKeyDown(t))}handleKeyUp(t){this._keyStates[t.keyCode].down=!1}handleKeyDown(t){this._keyStates[t.keyCode].pressed=!0,this._keyStates[t.keyCode].down=!0}reset(){for(let t=0;t<256;t++)this._keyStates[t].pressed=!1}isDown(t){return this._keyStates[t].down}isPressed(t){return this._keyStates[t].pressed}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(24),o=s(11),n=s(12),_=s(13),r=s(14),a=s(0),l=s(6),c=s(15),h=s(2),u=s(18),E=s(9),O=s(1),d=s(4);class T{constructor(){this._previousMenus=[],this._menu=new c.Menu}initMenuActions(){this._menuActionsMap=new Map,this._menuActionsMap.set(l.MenuActionType.PVP,new r.PVPCommand(this)),this._menuActionsMap.set(l.MenuActionType.PVC,new _.PVCCommand(this)),this._menuActionsMap.set(l.MenuActionType.ToggleSound,new n.ToggleSoundCommand),this._menuActionsMap.set(l.MenuActionType.GoToSubMenu,new o.GoToSubMenuCommand(this)),this._menuActionsMap.set(l.MenuActionType.GoToPreviousMenu,new i.GoToPreviousMenuCommand(this))}initMainMenu(){this._menu.init(this._menuActionsMap,a.GAME_CONFIG.MAIN_MENU_CONFIG)}async init(){await h.Assets.loadGameAssets(),this.initMenuActions(),this.initMainMenu(),this._menu.active=!0,this._poolGame=new u.GameWorld,this.gameLoop()}goToSubMenu(t){this._menu&&(this._menu.active=!1,this._previousMenus.push(this._menu)),this._menu=this._menu.getSubMenu(t),this._menu.active=!0}goToPreviousMenu(){this._previousMenus.length>0&&(this._menu.active=!1,this._menu=this._previousMenus.pop(),this._menu.active=!0)}start(){this.displayLoadingScreen().then(()=>{this._menu.active=!1,this._poolGame=new u.GameWorld,this._poolGame.initMatch()})}displayLoadingScreen(){return new Promise(t=>{this._isLoading=!0,O.Canvas2D.clear(),O.Canvas2D.drawImage(h.Assets.getSprite(a.GAME_CONFIG.SPRITES.CONTROLS),a.GAME_CONFIG.LOADING_SCREEN_IMAGE_POSITION),setTimeout(()=>{this._isLoading=!1,t()},a.GAME_CONFIG.LOADING_SCREEN_TIMEOUT)})}handleInput(){!this._menu.active&&E.Keyboard.isPressed(a.GAME_CONFIG.BACK_TO_MENU_KEY)&&(this.initMainMenu(),this._menu.active=!0)}update(){this._isLoading||(this.handleInput(),this._menu.active?this._menu.update():this._poolGame.update(),E.Keyboard.reset(),d.Mouse.reset())}draw(){this._isLoading||(O.Canvas2D.clear(),this._menu.active?this._menu.draw():this._poolGame.draw())}gameLoop(){this.update(),this.draw(),window.requestAnimationFrame(()=>{this.gameLoop()})}}e.Game=T,(new T).init()},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.GoToSubMenuCommand=class{constructor(t){this._game=t}execute(t){this._game.goToSubMenu(t)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0);e.ToggleSoundCommand=class{toggleMuteButtonSprite(){const t=i.GAME_CONFIG.SPRITES.MUTE_BUTTON,e=i.GAME_CONFIG.SPRITES.MUTE_BUTTON_HOVERED;i.GAME_CONFIG.SPRITES.MUTE_BUTTON=i.GAME_CONFIG.SPRITES.MUTE_BUTTON_PRESSED,i.GAME_CONFIG.SPRITES.MUTE_BUTTON_HOVERED=i.GAME_CONFIG.SPRITES.MUTE_BUTTON_PRESSED_HOVERED,i.GAME_CONFIG.SPRITES.MUTE_BUTTON_PRESSED=t,i.GAME_CONFIG.SPRITES.MUTE_BUTTON_PRESSED_HOVERED=e}execute(){i.GAME_CONFIG.SOUND_ON=!i.GAME_CONFIG.SOUND_ON,this.toggleMuteButtonSprite()}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.PVCCommand=class{constructor(t){this._game=t}execute(){this._game.start()}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.PVPCommand=class{constructor(t){this._game=t}execute(){this._game.start()}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(16),o=s(2),n=s(1),_=s(0),r=s(17);class a{set active(t){this._active=t}get active(){return this._active}init(t,e){this._buttons=e.BUTTONS.map(e=>new i.MenuButton(t.get(e.action),e.value,e.position,e.sprite,e.spriteOnHover)),this._labels=e.LABELS.map(t=>new r.MenuLabel(t.text,t.position,t.font,t.color,t.alignment)),this._subMenus=e.SUB_MENUS.map(e=>{const s=new a;return s.init(t,e),s})}getSubMenu(t){return this._subMenus[t]}update(){this._active&&this._buttons.forEach(t=>t.update()),this._subMenus.forEach(t=>t.update())}draw(){this._active&&(n.Canvas2D.changeCursor(_.GAME_CONFIG.DEFAULT_CURSOR),n.Canvas2D.drawImage(o.Assets.getSprite(_.GAME_CONFIG.SPRITES.MAIN_MENU_BACKGROUND)),this._labels.forEach(t=>t.draw()),this._buttons.forEach(t=>t.draw())),this._subMenus.forEach(t=>t.draw())}}e.Menu=a},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),o=s(4),n=s(1),_=s(2);e.MenuButton=class{constructor(t,e,s,o,n){this._command=t,this._value=e,this._position=s,this._spriteKey=o,this._spriteOnHoverKey=n,this._activeSprite=_.Assets.getSprite(i.GAME_CONFIG.SPRITES[this._spriteKey])}set hovered(t){this._hovered=t}isInsideButton(t){return t.x>this._position.x&&t.x<this._position.x+this._activeSprite.width&&t.y>this._position.y&&t.y<this._position.y+this._activeSprite.height}handleInput(){this.hovered=this.isInsideButton(o.Mouse.position),this._activeSprite=this._hovered?_.Assets.getSprite(i.GAME_CONFIG.SPRITES[this._spriteOnHoverKey]):_.Assets.getSprite(i.GAME_CONFIG.SPRITES[this._spriteKey]),this._hovered&&o.Mouse.isPressed(i.GAME_CONFIG.SELECT_MOUSE_BUTTON)&&(n.Canvas2D.changeCursor(i.GAME_CONFIG.DEFAULT_CURSOR),this._command.execute(this._value))}update(){this.handleInput()}draw(){this._hovered&&n.Canvas2D.changeCursor(i.GAME_CONFIG.BUTTON_CURSOR),n.Canvas2D.drawImage(this._activeSprite,this._position)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(1);e.MenuLabel=class{constructor(t,e,s,i,o){this._text=t,this._position=e,this._font=s,this._color=i,this._alignment=o}draw(){i.Canvas2D.drawText(this._text,this._font,this._color,this._position,this._alignment)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(8),o=s(19),n=s(20),_=s(21),r=s(5),a=s(3),l=s(0),c=s(2),h=s(1),u=s(22),E=s(4),O=s(23);e.GameWorld=class{constructor(){this._players=[new n.Player,new n.Player],this._currentPlayerIndex=0,this.initMatch()}get currentPlayer(){return this._players[this._currentPlayerIndex]}get nextPlayer(){return this._players[(this._currentPlayerIndex+1)%this._players.length]}getBallsByColor(t){return this._balls.filter(e=>e.color===t)}shootCueBall(){this._stick.power>0&&(this._stick.shoot(),this._cueBall.shoot(this._stick.power,this._stick.rotation),this._stick.movable=!1,setTimeout(()=>this._stick.hide(),l.GAME_CONFIG.TIMEOUT_TO_HIDE_STICK_AFTER_SHOT))}handleInput(){E.Mouse.isPressed(l.GAME_CONFIG.SHOOT_MOUSE_BUTTON)&&this.shootCueBall()}resolveBallCollisionWithCushion(t){const e=l.GAME_CONFIG.BALL_DIAMETER/2,s=t.nextPosition.y-e,i=t.nextPosition.x-e,o=t.nextPosition.x+e,n=t.nextPosition.y+e;let _=!1;s<=l.GAME_CONFIG.CUSHION_WIDTH&&(t.position=t.position.addY(l.GAME_CONFIG.CUSHION_WIDTH-t.position.y+e),t.velocity=new a.Vector2(t.velocity.x,-t.velocity.y),_=!0),i<=l.GAME_CONFIG.CUSHION_WIDTH&&(t.position=t.position.addX(l.GAME_CONFIG.CUSHION_WIDTH-t.position.x+e),t.velocity=new a.Vector2(-t.velocity.x,t.velocity.y),_=!0),o>=l.GAME_CONFIG.GAME_WIDTH-l.GAME_CONFIG.CUSHION_WIDTH&&(t.position=t.position.addX(l.GAME_CONFIG.GAME_WIDTH-l.GAME_CONFIG.CUSHION_WIDTH-t.position.x-e),t.velocity=new a.Vector2(-t.velocity.x,t.velocity.y),_=!0),n>=l.GAME_CONFIG.GAME_HEIGHT-l.GAME_CONFIG.CUSHION_WIDTH&&(t.position=t.position.addY(l.GAME_CONFIG.GAME_HEIGHT-l.GAME_CONFIG.CUSHION_WIDTH-t.position.y-e),t.velocity=new a.Vector2(t.velocity.x,-t.velocity.y),_=!0),_&&(t.velocity=t.velocity.mult(1-l.GAME_CONFIG.COLLISION_LOSS))}resolveBallsCollision(t,e){if(!t.visible||!e.visible)return!1;const s=t.position.subtract(e.position),i=s.length;if(i>l.GAME_CONFIG.BALL_DIAMETER)return!1;const o=s.mult((l.GAME_CONFIG.BALL_DIAMETER-i)/i);t.position=t.position.add(o.mult(.5)),e.position=e.position.subtract(o.mult(.5));const n=s.mult(1/s.length),_=new a.Vector2(-n.y,n.x),r=n.dot(t.velocity),c=_.dot(t.velocity),h=n.dot(e.velocity),u=_.dot(e.velocity),E=n.mult(h),O=_.mult(c),d=n.mult(r),T=_.mult(u);return t.velocity=E.add(O),e.velocity=d.add(T),t.velocity=t.velocity.mult(1-l.GAME_CONFIG.COLLISION_LOSS),e.velocity=e.velocity.mult(1-l.GAME_CONFIG.COLLISION_LOSS),!0}handleCollisions(){for(let t=0;t<this._balls.length;t++){this.resolveBallCollisionWithCushion(this._balls[t]);for(let e=t+1;e<this._balls.length;e++){const s=this._balls[t],o=this._balls[e];if(this.resolveBallsCollision(s,o)){const t=s.velocity.length+o.velocity.length,e=i.mapRange(t,0,l.GAME_CONFIG.MAX_BALL_EXPECTED_COLLISION_FORCE,0,1);if(c.Assets.playSound(l.GAME_CONFIG.SOUNDS.BALLS_COLLIDE,e),!this._turnState.firstCollidedBallColor){const t=s.color===r.Color.white?o.color:s.color;this._turnState.firstCollidedBallColor=t}}}}}isInsidePocket(t){return l.GAME_CONFIG.POCKETS_POSITIONS.some(e=>t.distFrom(e)<=l.GAME_CONFIG.POCKET_RADIUS)}resolveBallInPocket(t){this.isInsidePocket(t.position)&&t.hide()}isValidPlayerColor(t){return t===r.Color.red||t===r.Color.yellow}handleBallsInPockets(){this._balls.forEach(t=>{this.resolveBallInPocket(t),t.visible||this._turnState.pocketedBalls.includes(t)||(c.Assets.playSound(l.GAME_CONFIG.SOUNDS.RAIL,1),!this.currentPlayer.color&&this.isValidPlayerColor(t.color)&&(this.currentPlayer.color=t.color,this.nextPlayer.color=t.color===r.Color.yellow?r.Color.red:r.Color.yellow),this._turnState.pocketedBalls.push(t))})}handleBallInHand(){E.Mouse.isPressed(l.GAME_CONFIG.PLACE_BALL_IN_HAND_MOUSE_BUTTON)?(this._turnState.ballInHand=!1,this._stick.show(this._cueBall.position)):(this._stick.movable=!1,this._stick.visible=!1,this._cueBall.position=E.Mouse.position)}ballsMoving(){return this._balls.some(t=>t.moving)}concludeTurn(){this._turnState.pocketedBalls.forEach(t=>{const e=this._balls.indexOf(t);t.color!=r.Color.white&&this._balls.splice(e,1)}),this.currentPlayer.color&&(this.currentPlayer.matchScore=8-this.getBallsByColor(this.currentPlayer.color).length-this.getBallsByColor(r.Color.black).length),this.nextPlayer.color&&(this.nextPlayer.matchScore=8-this.getBallsByColor(this.nextPlayer.color).length-this.getBallsByColor(r.Color.black).length),this._turnState.isValid=this._referee.isValidTurn(this.currentPlayer,this._turnState)}handleGameOver(){this._turnState.isValid?this.currentPlayer.overallScore++:this.nextPlayer.overallScore++,this.initMatch()}nextTurn(){const t=!this._turnState.isValid;this._referee.isGameOver(this.currentPlayer,this._cueBall,this._8Ball)?this.handleGameOver():(this._cueBall.visible||this._cueBall.show(a.Vector2.copy(l.GAME_CONFIG.CUE_BALL_POSITION)),(t||0===this._turnState.pocketedBalls.length)&&(this._currentPlayerIndex++,this._currentPlayerIndex=this._currentPlayerIndex%this._players.length),this._stick.show(this._cueBall.position),this._turnState=new O.State,this._turnState.ballInHand=t)}drawCurrentPlayerLabel(){h.Canvas2D.drawText(l.GAME_CONFIG.CURRENT_PLAYER_LABEL+(this._currentPlayerIndex+1),l.GAME_CONFIG.CURRENT_PLAYER_LABEL_FONT,l.GAME_CONFIG.CURRENT_PLAYER_LABEL_COLOR,l.GAME_CONFIG.CURRENT_PLAYER_LABEL_POSITION,l.GAME_CONFIG.CURRENT_PLAYER_LABEL_ALIGNMENT)}drawMatchScores(){for(let t=0;t<this._players.length;t++)for(let e=0;e<this._players[t].matchScore;e++){const s=a.Vector2.copy(l.GAME_CONFIG.MATCH_SCORE_POSITIONS[t]).addToX(e*l.GAME_CONFIG.MATCH_SCORE_MARGIN),i=this._players[t].color===r.Color.red?c.Assets.getSprite(l.GAME_CONFIG.SPRITES.RED_SCORE):c.Assets.getSprite(l.GAME_CONFIG.SPRITES.YELLOW_SCORE);h.Canvas2D.drawImage(i,s)}}drawOverallScores(){for(let t=0;t<this._players.length;t++)h.Canvas2D.drawText(this._players[t].overallScore.toString(),l.GAME_CONFIG.OVERALL_SCORE_LABEL_FONT,l.GAME_CONFIG.OVERALL_SCORE_LABEL_COLOR,l.GAME_CONFIG.OVERALL_SCORE_LABELS_POSITIONS[t],l.GAME_CONFIG.OVERALL_SCORE_LABELS_ALIGNMENT)}initMatch(){const t=l.GAME_CONFIG.RED_BALLS_POSITIONS.map(t=>new u.Ball(a.Vector2.copy(t),r.Color.yellow)),e=l.GAME_CONFIG.YELLOW_BALLS_POSITIONS.map(t=>new u.Ball(a.Vector2.copy(t),r.Color.red));this._8Ball=new u.Ball(a.Vector2.copy(l.GAME_CONFIG.EIGHT_BALL_POSITION),r.Color.black),this._cueBall=new u.Ball(a.Vector2.copy(l.GAME_CONFIG.CUE_BALL_POSITION),r.Color.white),this._stick=new _.Stick(a.Vector2.copy(l.GAME_CONFIG.CUE_BALL_POSITION)),this._balls=[...t,...e,this._8Ball,this._cueBall],this._currentPlayerIndex=0,this._players.forEach(t=>{t.matchScore=0,t.color=null}),this._turnState=new O.State,this._referee=new o.Referee}update(){this._turnState.ballInHand?this.handleBallInHand():(this.handleBallsInPockets(),this.handleCollisions(),this.handleInput(),this._stick.update(),this._balls.forEach(t=>t.update()),this.ballsMoving()||this._stick.visible||(this.concludeTurn(),this.nextTurn()))}draw(){h.Canvas2D.drawImage(c.Assets.getSprite(l.GAME_CONFIG.SPRITES.TABLE)),this.drawCurrentPlayerLabel(),this.drawMatchScores(),this.drawOverallScores(),this._balls.forEach(t=>t.draw()),this._stick.draw()}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(5);e.Referee=class{isValidFirstTouch(t,e){return!!e&&(t.color?t.color===e||7===t.matchScore&&e===i.Color.black||8===t.matchScore&&e===i.Color.black:e!==i.Color.black)}isValidPocketedBalls(t,e){if(0===e.length)return!0;if(t.color)return 8===t.matchScore?1===e.length&&e[0].color===i.Color.black:e.every(e=>e.color===t.color);{const t=e[0].color;return t!==i.Color.white&&t!==i.Color.black&&e.every(e=>e.color===t)}}isValidTurn(t,e){return this.isValidFirstTouch(t,e.firstCollidedBallColor)&&this.isValidPocketedBalls(t,e.pocketedBalls)}isGameOver(t,e,s){return!s.visible||!e.visible&&7===t.matchScore||!e.visible&&8===t.matchScore}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Player=class{constructor(){this.matchScore=0,this.overallScore=0}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(9),o=s(4),n=s(0),_=s(2),r=s(1),a=s(3),l=s(8);e.Stick=class{constructor(t){this._position=t,this._sprite=_.Assets.getSprite(n.GAME_CONFIG.SPRITES.STICK),this._rotation=0,this._origin=a.Vector2.copy(n.GAME_CONFIG.STICK_ORIGIN),this._power=0,this._movable=!0,this._visible=!0}get position(){return a.Vector2.copy(this._position)}get rotation(){return this._rotation}get power(){return this._power}set movable(t){this._movable=t}get visible(){return this._visible}set visible(t){this._visible=t}increasePower(){this._power+=n.GAME_CONFIG.POWER_TO_ADD_PER_FRAME,this._origin.addToX(n.GAME_CONFIG.STICK_MOVEMENT_PER_FRAME)}decreasePower(){this._power-=n.GAME_CONFIG.POWER_TO_ADD_PER_FRAME,this._origin.addToX(-n.GAME_CONFIG.STICK_MOVEMENT_PER_FRAME)}isLessThanMaxPower(){return this._power<n.GAME_CONFIG.STICK_MAX_POWER}isMoreThanMinPower(){return this._power>=0}updatePower(){i.Keyboard.isDown(n.GAME_CONFIG.INCREASE_SHOT_POWER_KEY)&&this.isLessThanMaxPower()?this.increasePower():i.Keyboard.isDown(n.GAME_CONFIG.DECREASE_SHOT_POWER_KEY)&&this.isMoreThanMinPower()&&this.decreasePower()}updateRotation(){const t=o.Mouse.position.y-this._position.y,e=o.Mouse.position.x-this._position.x;this._rotation=Math.atan2(t,e)}hide(){this._power=0,this._visible=!1,this._movable=!1}show(t){this._position=t,this._origin=a.Vector2.copy(n.GAME_CONFIG.STICK_ORIGIN),this._movable=!0,this._visible=!0}shoot(){this._origin=a.Vector2.copy(n.GAME_CONFIG.STICK_SHOT_ORIGIN);const t=l.mapRange(this._power,0,n.GAME_CONFIG.STICK_MAX_POWER,0,1);_.Assets.playSound(n.GAME_CONFIG.SOUNDS.STRIKE,t)}update(){this._movable&&(this.updateRotation(),this.updatePower())}draw(){this._visible&&r.Canvas2D.drawImage(this._sprite,this._position,this._rotation,this._origin)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),o=s(1),n=s(5),_=s(3),r=s(2);e.Ball=class{constructor(t,e){this._position=t,this._velocity=_.Vector2.zero,this._moving=!1,this._visible=!0,this._color=e,this.resolveSprite(e)}get position(){return _.Vector2.copy(this._position)}set position(t){this._position=t}get nextPosition(){return this.position.add(this._velocity.mult(1-i.GAME_CONFIG.FRICTION))}get velocity(){return _.Vector2.copy(this._velocity)}set velocity(t){this._moving=t.length>0,this._velocity=t}get moving(){return this._moving}get color(){return this._color}get visible(){return this._visible}resolveSprite(t){switch(t){case n.Color.white:this._sprite=r.Assets.getSprite(i.GAME_CONFIG.SPRITES.CUE_BALL);break;case n.Color.black:this._sprite=r.Assets.getSprite(i.GAME_CONFIG.SPRITES.BLACK_BALL);break;case n.Color.red:this._sprite=r.Assets.getSprite(i.GAME_CONFIG.SPRITES.RED_BALL);break;case n.Color.yellow:this._sprite=r.Assets.getSprite(i.GAME_CONFIG.SPRITES.YELLOW_BALL)}}shoot(t,e){this._velocity=new _.Vector2(t*Math.cos(e),t*Math.sin(e)),this._moving=!0}show(t){this._position=t,this._velocity=_.Vector2.zero,this._visible=!0}hide(){this._velocity=_.Vector2.zero,this._moving=!1,this._visible=!1}update(){this._moving&&(this._velocity.multBy(1-i.GAME_CONFIG.FRICTION),this._position.addTo(this._velocity),this._velocity.length<i.GAME_CONFIG.BALL_MIN_VELOCITY_LENGTH&&(this.velocity=_.Vector2.zero,this._moving=!1))}draw(){this._visible&&o.Canvas2D.drawImage(this._sprite,this._position,0,i.GAME_CONFIG.BALL_ORIGIN)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.State=class{constructor(){this.pocketedBalls=[],this.ballInHand=!1,this.isValid=!1}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.GoToPreviousMenuCommand=class{constructor(t){this._game=t}execute(){this._game.goToPreviousMenu()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,