!function(t){var e={};function s(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,s),o.l=!0,o.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)s.d(i,o,function(e){return t[e]}.bind(null,o));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=9)}([function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(18);e.GAME_CONFIG={GAME_WIDTH:1500,GAME_HEIGHT:825,RED_BALLS_POSITIONS:[{x:1056,y:433},{x:1090,y:374},{x:1126,y:393},{x:1126,y:472},{x:1162,y:335},{x:1162,y:374},{x:1162,y:452}],YELLOW_BALLS_POSITIONS:[{x:1022,y:413},{x:1056,y:393},{x:1090,y:452},{x:1126,y:354},{x:1126,y:433},{x:1162,y:413},{x:1162,y:491}],CUE_BALL_POSITION:{x:413,y:413},EIGHT_BALL_POSITION:{x:1090,y:413},MATCH_SCORE_POSITIONS:[{x:420,y:27},{x:932,y:27}],MATCH_SCORE_MARGIN:20,OVERALL_SCORE_LABELS_POSITIONS:[{x:628,y:460},{x:778,y:460}],OVERALL_SCORE_LABEL_FONT:"200px Impact",OVERALL_SCORE_LABEL_COLOR:"#126736",OVERALL_SCORE_LABEL_ALLIGNMENT:"top",SPRITES_BASE_PATH:"assets/sprites/",SPRITES:{MAIN_MENU_BACKGROUND:"main_menu_background.png",TABLE:"spr_background4.png",CUE_BALL:"spr_ball2.png",RED_BALL:"spr_redBall2.png",YELLOW_BALL:"spr_yellowBall2.png",BLACK_BALL:"spr_blackBall2.png",STICK:"spr_stick.png",TWO_PLAYERS_BUTTON:"2_players_button.png",TWO_PLAYERS_BUTTON_HOVERED:"2_players_button_hover.png",ONE_PLAYER_BUTTON:"1_player_button.png",ONE_PLAYER_BUTTON_HOVERED:"1_player_button_hover.png",MUTE_BUTTON:"mute_button.png",MUTE_BUTTON_HOVERED:"mute_button_hover.png",MUTE_BUTTON_PRESSED:"mute_button_pressed.png",MUTE_BUTTON_PRESSED_HOVERED:"mute_button_pressed_hover.png",EASY_BUTTON:"easy_button.png",EASY_BUTTON_HOVERED:"easy_button_hover.png",MEDIUM_BUTTON:"medium_button.png",MEDIUM_BUTTON_HOVERED:"medium_button_hover.png",HARD_BUTTON:"hard_button.png",HARD_BUTTON_HOVERED:"hard_button_hover.png",BACK_BUTTON:"back_button.png",BACK_BUTTON_HOVERED:"back_button_hover.png",CONTINUE_BUTTON:"continue_button.png",CONTINUE_BUTTON_HOVERED:"continue_button_hover.png",INSANE_BUTTON:"insane_button.png",INSANE_BUTTON_HOVERED:"insane_button_hover.png",ABOUT_BUTTON:"about_button.png",ABOUT_BUTTON_HOVERED:"about_button_hover.png",CONTROLS:"controls.png",RED_SCORE:"red_score.png",YELLOW_SCORE:"yellow_score.png"},SOUNDS_BASE_PATH:"assets/sounds/",SOUNDS:{BALLS_COLLIDE:"BallsCollide.wav",STRIKE:"Strike.wav",RAIL:"Hole.wav"},FRICTION:.0208,COLLISION_LOSS:.0208,CUSHION_WIDTH:57,POCKET_RADIUS:48,POCKETS_POSITIONS:[{x:62,y:62},{x:750,y:32},{x:1435,y:62},{x:62,y:762},{x:750,y:794},{x:1435,y:762}],CURRENT_PLAYER_LABEL_POSITION:{x:640,y:260},CURRENT_PLAYER_LABEL_COLOR:"#126736",CURRENT_PLAYER_LABEL:"PLAYER ",CURRENT_PLAYER_LABEL_FONT:"70px Impact",CURRENT_PLAYER_LABEL_ALIGNMENT:"top",BALL_DIAMETER:38,BALL_ORIGIN:{x:25,y:25},BALL_MIN_VELOCITY_LENGTH:.05,MAX_BALL_EXPECTED_VELOCITY:200,MAX_BALL_EXPECTED_COLLISION_FORCE:100,STICK_ORIGIN:{x:970,y:11},STICK_SHOT_ORIGIN:{x:950,y:11},POWER_TO_ADD_PER_FRAME:1,STICK_MOVEMENT_PER_FRAME:2,STICK_MAX_POWER:65,SELECT_MOUSE_BUTTON:0,SHOOT_MOUSE_BUTTON:0,PLACE_BALL_IN_HAND_MOUSE_BUTTON:0,INCREASE_SHOT_POWER_KEY:87,DECREASE_SHOT_POWER_KEY:83,BACK_TO_MENU_KEY:27,TIMEOUT_TO_HIDE_STICK_AFTER_SHOT:500,TIMOUT_TO_HIDE_BALL_AFTER_POCKET:100,LOADING_SCREEN_TIMEOUT:5e3,MAIN_MENU_BUTTONS:[{action:i.MenuAction.PVP,position:{x:200,y:200},sprite:"TWO_PLAYERS_BUTTON",spriteOnHover:"TWO_PLAYERS_BUTTON_HOVERED",spriteOnPressed:null},{position:{x:200,y:400},sprite:"ONE_PLAYER_BUTTON",spriteOnHover:"ONE_PLAYER_BUTTON_HOVERED",spriteOnPressed:null}],DEFAULT_CURSOR:"default",BUTTON_CURSOR:"pointer",LOADING_SCREEN_IMAGE_POSITION:{x:450,y:112.5}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),o=s(2);const r=document.getElementById("screen"),n=document.getElementById("gameArea");e.Canvas2D=new class{get scaleX(){return this._scale.x}get scaleY(){return this._scale.y}get offsetX(){return this._offset.x}get offsetY(){return this._offset.y}constructor(t,e){this._canvasContainer=e,this._canvas=t,this._context=this._canvas.getContext("2d"),this.resizeCanvas()}resizeCanvas(){const t=i.GAME_CONFIG.GAME_WIDTH,e=i.GAME_CONFIG.GAME_HEIGHT,s=t/e;let r=window.innerHeight,n=window.innerWidth;n/r>s?n=r*s:r=n/s,this._canvasContainer.style.width=n+"px",this._canvasContainer.style.height=r+"px",this._canvasContainer.style.marginTop=(window.innerHeight-r)/2+"px",this._canvasContainer.style.marginLeft=(window.innerWidth-n)/2+"px",this._canvasContainer.style.marginBottom=(window.innerHeight-r)/2+"px",this._canvasContainer.style.marginRight=(window.innerWidth-n)/2+"px",this._scale=new o.Vector2(n/t,r/e),this._canvas.width=n,this._canvas.height=r,this._canvas.offsetParent&&(this._offset=new o.Vector2(this._canvas.offsetLeft,this._canvas.offsetTop))}clear(){this._context.clearRect(0,0,this._canvas.width,this._canvas.height)}drawImage(t,e=o.Vector2.zero,s=0,i=o.Vector2.zero){this._context.save(),this._context.scale(this._scale.x,this._scale.y),this._context.translate(e.x,e.y),this._context.rotate(s),this._context.drawImage(t,0,0,t.width,t.height,-i.x,-i.y,t.width,t.height),this._context.restore()}drawText(t,e,s,i,o="left"){this._context.save(),this._context.scale(this._scale.x,this._scale.y),this._context.fillStyle=s,this._context.font=e,this._context.textAlign=o,this._context.fillText(t,i.x,i.y),this._context.restore()}changeCursor(t){this._canvas.style.cursor=t}}(r,n),window.addEventListener("resize",e.Canvas2D.resizeCanvas.bind(e.Canvas2D))},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t,e){this._x=t,this._y=e}get x(){return this._x}get y(){return this._y}static get zero(){return new i(0,0)}get length(){return Math.sqrt(Math.pow(this._x,2)+Math.pow(this._y,2))}static copy(t){return new i(t.x,t.y)}addX(t){return new i(this._x,this._y).addToX(t)}addY(t){return new i(this._x,this._y).addToY(t)}addToX(t){return this._x+=t,this}addToY(t){return this._y+=t,this}addTo(t){return this.addToX(t.x).addToY(t.y)}add(t){return new i(this._x,this._y).addTo(t)}subtractTo(t){return this._x-=t.x,this._y-=t.y,this}subtract(t){return new i(this._x,this._y).subtractTo(t)}mult(t){return new i(this._x,this._y).multBy(t)}multBy(t){return this._x*=t,this._y*=t,this}dot(t){return this._x*t.x+this._y*t.y}distFrom(t){return this.subtract(t).length}}e.Vector2=i},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0);e.Assets=new class{constructor(){this._sprites=new Map,this._sounds=new Map}async loadGameAssets(){await this.loadGameSprites(),await this.loadGameSounds()}getSprite(t){return this._sprites.get(t)}getSound(t){return this._sounds.get(t).cloneNode(!0)}playSound(t,e){const s=this.getSound(t);s.volume=e,s.play()}loadSprite(t){const e=new Image;return this._sprites.set(t,e),new Promise(s=>{e.onload=(()=>s()),e.src=i.GAME_CONFIG.SPRITES_BASE_PATH+t})}async loadGameSprites(){const t=Object.values(i.GAME_CONFIG.SPRITES).map(this.loadSprite.bind(this));await Promise.all(t)}loadSound(t){const e=new Audio;return this._sounds.set(t,e),new Promise(s=>{e.src=i.GAME_CONFIG.SOUNDS_BASE_PATH+t,s()})}async loadGameSounds(){const t=Object.values(i.GAME_CONFIG.SOUNDS).map(this.loadSound.bind(this));await Promise.all(t)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.white="#BABABA",t.black="#2B2B2B",t.red="#B62A2F",t.yellow="#FECA34"}(e.Color||(e.Color={}))},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(8),o=s(1),r=s(2);e.Mouse=new class{constructor(){this._buttonStates=[];for(let t=0;t<3;t++)this._buttonStates[t]=new i.ButtonState;this._position=r.Vector2.zero,document.addEventListener("mousemove",t=>this.handleMouseMove(t)),document.addEventListener("mousedown",t=>this.handleMouseDown(t)),document.addEventListener("mouseup",t=>this.handleMouseUp(t))}get position(){return r.Vector2.copy(this._position)}handleMouseMove(t){const e=(t.pageX-o.Canvas2D.offsetX)/o.Canvas2D.scaleX,s=(t.pageY-o.Canvas2D.offsetY)/o.Canvas2D.scaleY;this._position=new r.Vector2(e,s)}handleMouseDown(t){this._buttonStates[t.button].down=!0,this._buttonStates[t.button].pressed=!0}handleMouseUp(t){this._buttonStates[t.button].down=!1}reset(){for(let t=0;t<3;t++)this._buttonStates[t].pressed=!1}isDown(t){return this._buttonStates[t].down}isPressed(t){return this._buttonStates[t].pressed}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.mapRange=((t,e,s,i,o)=>{let r=(t-e)*(o-i)/(s-e)+i;return r=(r=r<i?i:r)>o?o:r})},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(8);e.Keyboard=new class{constructor(){this._keyStates=[];for(let t=0;t<256;t++)this._keyStates[t]=new i.ButtonState;document.addEventListener("keyup",t=>this.handleKeyUp(t)),document.addEventListener("keydown",t=>this.handleKeyDown(t))}handleKeyUp(t){this._keyStates[t.keyCode].down=!1}handleKeyDown(t){this._keyStates[t.keyCode].pressed=!0,this._keyStates[t.keyCode].down=!0}reset(){for(let t=0;t<256;t++)this._keyStates[t].pressed=!1}isDown(t){return this._keyStates[t].down}isPressed(t){return this._keyStates[t].pressed}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.ButtonState=class{constructor(){this.down=!1,this.pressed=!1}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),o=s(18),r=s(16),n=s(3),_=s(10),a=s(7),l=s(1),c=s(5);let h,u,E,O;const d=()=>{(()=>new Promise(t=>{O=!0,l.Canvas2D.clear(),l.Canvas2D.drawImage(n.Assets.getSprite(i.GAME_CONFIG.SPRITES.CONTROLS),i.GAME_CONFIG.LOADING_SCREEN_IMAGE_POSITION),setTimeout(()=>{O=!1,t()},i.GAME_CONFIG.LOADING_SCREEN_TIMEOUT)}))().then(()=>{u.active=!1,E.initMatch()})},I=()=>{O||(a.Keyboard.isPressed(i.GAME_CONFIG.BACK_TO_MENU_KEY)&&(u.active=!0),u.active?u.update():E.update(),a.Keyboard.reset(),c.Mouse.reset())},C=()=>{I(),O||(l.Canvas2D.clear(),u.active?u.draw():E.draw()),requestAnimationFrame(C)};(async()=>{await n.Assets.loadGameAssets(),(h=new Map).set(o.MenuAction.PVP,d),(u=new r.MainMenu(h)).active=!0,E=new _.GameWorld,C()})()},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(6),o=s(11),r=s(12),n=s(13),_=s(4),a=s(2),l=s(0),c=s(3),h=s(1),u=s(14),E=s(5),O=s(15);e.GameWorld=class{constructor(){this._players=[new r.Player,new r.Player],this._currentPlayerIndex=0,this.initMatch()}get currentPlayer(){return this._players[this._currentPlayerIndex]}get nextPlayer(){return this._players[(this._currentPlayerIndex+1)%this._players.length]}getBallsByColor(t){return this._balls.filter(e=>e.color===t)}shootCueBall(){this._stick.power>0&&(this._stick.shoot(),this._cueBall.shoot(this._stick.power,this._stick.rotation),this._stick.movable=!1,setTimeout(()=>this._stick.hide(),l.GAME_CONFIG.TIMEOUT_TO_HIDE_STICK_AFTER_SHOT))}handleInput(){E.Mouse.isPressed(l.GAME_CONFIG.SHOOT_MOUSE_BUTTON)&&this.shootCueBall()}resolveBallCollisionWithCushion(t){const e=l.GAME_CONFIG.BALL_DIAMETER/2,s=t.nextPosition.y-e,i=t.nextPosition.x-e,o=t.nextPosition.x+e,r=t.nextPosition.y+e;let n=!1;s<=l.GAME_CONFIG.CUSHION_WIDTH&&(t.position=t.position.addY(l.GAME_CONFIG.CUSHION_WIDTH-t.position.y+e),t.velocity=new a.Vector2(t.velocity.x,-t.velocity.y),n=!0),i<=l.GAME_CONFIG.CUSHION_WIDTH&&(t.position=t.position.addX(l.GAME_CONFIG.CUSHION_WIDTH-t.position.x+e),t.velocity=new a.Vector2(-t.velocity.x,t.velocity.y),n=!0),o>=l.GAME_CONFIG.GAME_WIDTH-l.GAME_CONFIG.CUSHION_WIDTH&&(t.position=t.position.addX(l.GAME_CONFIG.GAME_WIDTH-l.GAME_CONFIG.CUSHION_WIDTH-t.position.x-e),t.velocity=new a.Vector2(-t.velocity.x,t.velocity.y),n=!0),r>=l.GAME_CONFIG.GAME_HEIGHT-l.GAME_CONFIG.CUSHION_WIDTH&&(t.position=t.position.addY(l.GAME_CONFIG.GAME_HEIGHT-l.GAME_CONFIG.CUSHION_WIDTH-t.position.y-e),t.velocity=new a.Vector2(t.velocity.x,-t.velocity.y),n=!0),n&&(t.velocity=t.velocity.mult(1-l.GAME_CONFIG.COLLISION_LOSS))}resolveBallsCollision(t,e){if(!t.visible||!e.visible)return!1;const s=t.position.subtract(e.position),i=s.length;if(i>l.GAME_CONFIG.BALL_DIAMETER)return!1;const o=s.mult((l.GAME_CONFIG.BALL_DIAMETER-i)/i);t.position=t.position.add(o.mult(.5)),e.position=e.position.subtract(o.mult(.5));const r=s.mult(1/s.length),n=new a.Vector2(-r.y,r.x),_=r.dot(t.velocity),c=n.dot(t.velocity),h=r.dot(e.velocity),u=n.dot(e.velocity),E=r.mult(h),O=n.mult(c),d=r.mult(_),I=n.mult(u);return t.velocity=E.add(O),e.velocity=d.add(I),t.velocity=t.velocity.mult(1-l.GAME_CONFIG.COLLISION_LOSS),e.velocity=e.velocity.mult(1-l.GAME_CONFIG.COLLISION_LOSS),!0}handleCollisions(){for(let t=0;t<this._balls.length;t++){this.resolveBallCollisionWithCushion(this._balls[t]);for(let e=t+1;e<this._balls.length;e++){const s=this._balls[t],o=this._balls[e];if(this.resolveBallsCollision(s,o)){const t=s.velocity.length+o.velocity.length,e=i.mapRange(t,0,l.GAME_CONFIG.MAX_BALL_EXPECTED_COLLISION_FORCE,0,1);if(c.Assets.playSound(l.GAME_CONFIG.SOUNDS.BALLS_COLLIDE,e),!this._turnState.firstCollidedBallColor){const t=s.color===_.Color.white?o.color:s.color;this._turnState.firstCollidedBallColor=t}}}}}isInsidePocket(t){return l.GAME_CONFIG.POCKETS_POSITIONS.some(e=>t.distFrom(e)<=l.GAME_CONFIG.POCKET_RADIUS)}resolveBallInPocket(t){this.isInsidePocket(t.position)&&t.hide()}isValidPlayerColor(t){return t===_.Color.red||t===_.Color.yellow}handleBallsInPockets(){this._balls.forEach(t=>{this.resolveBallInPocket(t),t.visible||this._turnState.pocketedBalls.includes(t)||(c.Assets.playSound(l.GAME_CONFIG.SOUNDS.RAIL,1),!this.currentPlayer.color&&this.isValidPlayerColor(t.color)&&(this.currentPlayer.color=t.color,this.nextPlayer.color=t.color===_.Color.yellow?_.Color.red:_.Color.yellow),this._turnState.pocketedBalls.push(t))})}handleBallInHand(){E.Mouse.isPressed(l.GAME_CONFIG.PLACE_BALL_IN_HAND_MOUSE_BUTTON)?(this._turnState.ballInHand=!1,this._stick.show(this._cueBall.position)):(this._stick.movable=!1,this._stick.visible=!1,this._cueBall.position=E.Mouse.position)}ballsMoving(){return this._balls.some(t=>t.moving)}concludeTurn(){this._turnState.pocketedBalls.forEach(t=>{const e=this._balls.indexOf(t);t.color!=_.Color.white&&this._balls.splice(e,1)}),this.currentPlayer.color&&(this.currentPlayer.matchScore=8-this.getBallsByColor(this.currentPlayer.color).length-this.getBallsByColor(_.Color.black).length),this.nextPlayer.color&&(this.nextPlayer.matchScore=8-this.getBallsByColor(this.nextPlayer.color).length-this.getBallsByColor(_.Color.black).length),this._turnState.isValid=this._referee.isValidTurn(this.currentPlayer,this._turnState)}handleGameOver(){this._turnState.isValid?this.currentPlayer.overallScore++:this.nextPlayer.overallScore++,this.initMatch()}nextTurn(){const t=!this._turnState.isValid;this._referee.isGameOver(this.currentPlayer,this._cueBall,this._8Ball)?this.handleGameOver():(this._cueBall.visible||this._cueBall.show(a.Vector2.copy(l.GAME_CONFIG.CUE_BALL_POSITION)),(t||0===this._turnState.pocketedBalls.length)&&(this._currentPlayerIndex++,this._currentPlayerIndex=this._currentPlayerIndex%this._players.length),this._stick.show(this._cueBall.position),this._turnState=new O.State,this._turnState.ballInHand=t)}drawCurrentPlayerLabel(){h.Canvas2D.drawText(l.GAME_CONFIG.CURRENT_PLAYER_LABEL+(this._currentPlayerIndex+1),l.GAME_CONFIG.CURRENT_PLAYER_LABEL_FONT,l.GAME_CONFIG.CURRENT_PLAYER_LABEL_COLOR,l.GAME_CONFIG.CURRENT_PLAYER_LABEL_POSITION,l.GAME_CONFIG.CURRENT_PLAYER_LABEL_ALIGNMENT)}drawMatchScores(){for(let t=0;t<this._players.length;t++)for(let e=0;e<this._players[t].matchScore;e++){const s=a.Vector2.copy(l.GAME_CONFIG.MATCH_SCORE_POSITIONS[t]).addToX(e*l.GAME_CONFIG.MATCH_SCORE_MARGIN),i=this._players[t].color===_.Color.red?c.Assets.getSprite(l.GAME_CONFIG.SPRITES.RED_SCORE):c.Assets.getSprite(l.GAME_CONFIG.SPRITES.YELLOW_SCORE);h.Canvas2D.drawImage(i,s)}}drawOverallScores(){for(let t=0;t<this._players.length;t++)h.Canvas2D.drawText(this._players[t].overallScore.toString(),l.GAME_CONFIG.OVERALL_SCORE_LABEL_FONT,l.GAME_CONFIG.OVERALL_SCORE_LABEL_COLOR,l.GAME_CONFIG.OVERALL_SCORE_LABELS_POSITIONS[t],l.GAME_CONFIG.OVERALL_SCORE_LABELS_ALLIGNMENT)}initMatch(){const t=l.GAME_CONFIG.RED_BALLS_POSITIONS.map(t=>new u.Ball(a.Vector2.copy(t),_.Color.yellow)),e=l.GAME_CONFIG.YELLOW_BALLS_POSITIONS.map(t=>new u.Ball(a.Vector2.copy(t),_.Color.red));this._8Ball=new u.Ball(a.Vector2.copy(l.GAME_CONFIG.EIGHT_BALL_POSITION),_.Color.black),this._cueBall=new u.Ball(a.Vector2.copy(l.GAME_CONFIG.CUE_BALL_POSITION),_.Color.white),this._stick=new n.Stick(a.Vector2.copy(l.GAME_CONFIG.CUE_BALL_POSITION)),this._balls=[...t,...e,this._8Ball,this._cueBall],this._currentPlayerIndex=0,this._players.forEach(t=>{t.matchScore=0,t.color=null}),this._turnState=new O.State,this._referee=new o.Referee}update(){this._turnState.ballInHand?this.handleBallInHand():(this.handleBallsInPockets(),this.handleCollisions(),this.handleInput(),this._stick.update(),this._balls.forEach(t=>t.update()),this.ballsMoving()||this._stick.visible||(this.concludeTurn(),this.nextTurn()))}draw(){h.Canvas2D.drawImage(c.Assets.getSprite(l.GAME_CONFIG.SPRITES.TABLE)),this.drawCurrentPlayerLabel(),this.drawMatchScores(),this.drawOverallScores(),this._balls.forEach(t=>t.draw()),this._stick.draw()}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(4);e.Referee=class{isValidFirstTouch(t,e){return!!e&&(t.color?t.color===e||7===t.matchScore&&e===i.Color.black||8===t.matchScore&&e===i.Color.black:e!==i.Color.black)}isValidPocketedBalls(t,e){if(0===e.length)return!0;if(t.color)return 8===t.matchScore?1===e.length&&e[0].color===i.Color.black:e.every(e=>e.color===t.color);{const t=e[0].color;return t!==i.Color.white&&t!==i.Color.black&&e.every(e=>e.color===t)}}isValidTurn(t,e){return this.isValidFirstTouch(t,e.firstCollidedBallColor)&&this.isValidPocketedBalls(t,e.pocketedBalls)}isGameOver(t,e,s){return!s.visible||!e.visible&&7===t.matchScore||!e.visible&&8===t.matchScore}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Player=class{constructor(){this.matchScore=0,this.overallScore=0}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(7),o=s(5),r=s(0),n=s(3),_=s(1),a=s(2),l=s(6);e.Stick=class{constructor(t){this._position=t,this._sprite=n.Assets.getSprite(r.GAME_CONFIG.SPRITES.STICK),this._rotation=0,this._origin=a.Vector2.copy(r.GAME_CONFIG.STICK_ORIGIN),this._power=0,this._movable=!0,this._visible=!0}get position(){return a.Vector2.copy(this._position)}get rotation(){return this._rotation}get power(){return this._power}set movable(t){this._movable=t}get visible(){return this._visible}set visible(t){this._visible=t}increasePower(){this._power+=r.GAME_CONFIG.POWER_TO_ADD_PER_FRAME,this._origin.addToX(r.GAME_CONFIG.STICK_MOVEMENT_PER_FRAME)}decreasePower(){this._power-=r.GAME_CONFIG.POWER_TO_ADD_PER_FRAME,this._origin.addToX(-r.GAME_CONFIG.STICK_MOVEMENT_PER_FRAME)}isLessThanMaxPower(){return this._power<r.GAME_CONFIG.STICK_MAX_POWER}isMoreThanMinPower(){return this._power>=0}updatePower(){i.Keyboard.isDown(r.GAME_CONFIG.INCREASE_SHOT_POWER_KEY)&&this.isLessThanMaxPower()?this.increasePower():i.Keyboard.isDown(r.GAME_CONFIG.DECREASE_SHOT_POWER_KEY)&&this.isMoreThanMinPower()&&this.decreasePower()}updateRotation(){const t=o.Mouse.position.y-this._position.y,e=o.Mouse.position.x-this._position.x;this._rotation=Math.atan2(t,e)}hide(){this._power=0,this._visible=!1,this._movable=!1}show(t){this._position=t,this._origin=a.Vector2.copy(r.GAME_CONFIG.STICK_ORIGIN),this._movable=!0,this._visible=!0}shoot(){this._origin=a.Vector2.copy(r.GAME_CONFIG.STICK_SHOT_ORIGIN);const t=l.mapRange(this._power,0,r.GAME_CONFIG.STICK_MAX_POWER,0,1);n.Assets.playSound(r.GAME_CONFIG.SOUNDS.STRIKE,t)}update(){this._movable&&(this.updateRotation(),this.updatePower())}draw(){this._visible&&_.Canvas2D.drawImage(this._sprite,this._position,this._rotation,this._origin)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),o=s(1),r=s(4),n=s(2),_=s(3);e.Ball=class{constructor(t,e){this._position=t,this._velocity=n.Vector2.zero,this._moving=!1,this._visible=!0,this._color=e,this.resolveSprite(e)}get position(){return n.Vector2.copy(this._position)}set position(t){this._position=t}get nextPosition(){return this.position.add(this._velocity.mult(1-i.GAME_CONFIG.FRICTION))}get velocity(){return n.Vector2.copy(this._velocity)}set velocity(t){this._moving=t.length>0,this._velocity=t}get moving(){return this._moving}get color(){return this._color}get visible(){return this._visible}resolveSprite(t){switch(t){case r.Color.white:this._sprite=_.Assets.getSprite(i.GAME_CONFIG.SPRITES.CUE_BALL);break;case r.Color.black:this._sprite=_.Assets.getSprite(i.GAME_CONFIG.SPRITES.BLACK_BALL);break;case r.Color.red:this._sprite=_.Assets.getSprite(i.GAME_CONFIG.SPRITES.RED_BALL);break;case r.Color.yellow:this._sprite=_.Assets.getSprite(i.GAME_CONFIG.SPRITES.YELLOW_BALL)}}shoot(t,e){this._velocity=new n.Vector2(t*Math.cos(e),t*Math.sin(e)),this._moving=!0}show(t){this._position=t,this._velocity=n.Vector2.zero,this._visible=!0}hide(){this._velocity=n.Vector2.zero,this._moving=!1,this._visible=!1}update(){this._moving&&(this._velocity.multBy(1-i.GAME_CONFIG.FRICTION),this._position.addTo(this._velocity),this._velocity.length<i.GAME_CONFIG.BALL_MIN_VELOCITY_LENGTH&&(this.velocity=n.Vector2.zero,this._moving=!1))}draw(){this._visible&&o.Canvas2D.drawImage(this._sprite,this._position,0,i.GAME_CONFIG.BALL_ORIGIN)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.State=class{constructor(){this.pocketedBalls=[],this.ballInHand=!1,this.isValid=!1}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(17),o=s(3),r=s(1),n=s(0);e.MainMenu=class{set active(t){this._active=t}get active(){return this._active}constructor(t){this._buttons=n.GAME_CONFIG.MAIN_MENU_BUTTONS.map(e=>new i.MenuButton(t.get(e.action),e.position,o.Assets.getSprite(n.GAME_CONFIG.SPRITES[e.sprite]),o.Assets.getSprite(n.GAME_CONFIG.SPRITES[e.spriteOnHover])))}update(){this._buttons.forEach(t=>t.update())}draw(){r.Canvas2D.changeCursor(n.GAME_CONFIG.DEFAULT_CURSOR),r.Canvas2D.drawImage(o.Assets.getSprite(n.GAME_CONFIG.SPRITES.MAIN_MENU_BACKGROUND)),this._buttons.forEach(t=>t.draw())}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),o=s(5),r=s(1);e.MenuButton=class{constructor(t,e,s,i){this._callback=t,this._position=e,this._sprite=s,this._spriteOnHover=i,this._activeSprite=this._sprite}set hovered(t){this._hovered=t,this._activeSprite=t?this._spriteOnHover:this._sprite}isInsideButton(t){return t.x>this._position.x&&t.x<this._position.x+this._sprite.width&&t.y>this._position.y&&t.y<this._position.y+this._sprite.height}handleInput(){this.hovered=this.isInsideButton(o.Mouse.position),this._hovered&&o.Mouse.isPressed(i.GAME_CONFIG.SELECT_MOUSE_BUTTON)&&(r.Canvas2D.changeCursor(i.GAME_CONFIG.DEFAULT_CURSOR),this._callback())}update(){this.handleInput()}draw(){this._hovered&&r.Canvas2D.changeCursor(i.GAME_CONFIG.BUTTON_CURSOR),r.Canvas2D.drawImage(this._activeSprite,this._position)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.CONTINUE=0]="CONTINUE",t[t.PVP=1]="PVP",t[t.PVC=2]="PVC"}(e.MenuAction||(e.MenuAction={}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,