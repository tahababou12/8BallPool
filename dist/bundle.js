!function(t){var e={};function s(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,s),o.l=!0,o.exports}s.m=t,s.c=e,s.d=function(t,e,n){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)s.d(n,o,function(e){return t[e]}.bind(null,o));return n},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=3)}([function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GAME_CONFIG={GAME_WIDTH:1500,GAME_HEIGHT:825,RED_BALLS_POSITIONS:[{x:1056,y:433},{x:1090,y:374},{x:1126,y:393},{x:1126,y:472},{x:1162,y:335},{x:1162,y:374},{x:1162,y:452}],YELLOW_BALLS_POSITIONS:[{x:1022,y:413},{x:1056,y:393},{x:1090,y:452},{x:1126,y:354},{x:1126,y:433},{x:1162,y:413},{x:1162,y:491}],CUE_BALL_POSITION:{x:413,y:413},EIGHT_BALL_POSITION:{x:1090,y:413},BALL_ORIGIN:{x:25,y:25},STICK_ORIGIN:{x:970,y:11},SPRITES_BASE_PATH:"assets/sprites/",SPRITES:{MAIN_MENU_BACKGROUND:"main_menu_background.png",TABLE:"spr_background4.png",CUE_BALL:"spr_ball2.png",RED_BALL:"spr_redBall2.png",YELLOW_BALL:"spr_yellowBall2.png",BLACK_BALL:"spr_blackBall2.png",STICK:"spr_stick.png",TWO_PLAYERS_BUTTON:"2_players_button.png",TWO_PLAYERS_BUTTON_HOVERED:"2_players_button_hover.png",ONE_PLAYER_BUTTON:"1_player_button.png",ONE_PLAYER_BUTTON_HOVERED:"1_player_button_hover.png",MUTE_BUTTON:"mute_button.png",MUTE_BUTTON_HOVERED:"mute_button_hover.png",MUTE_BUTTON_PRESSED:"mute_button_pressed.png",MUTE_BUTTON_PRESSED_HOVERED:"mute_button_pressed_hover.png",EASY_BUTTON:"easy_button.png",EASY_BUTTON_HOVERED:"easy_button_hover.png",MEDIUM_BUTTON:"medium_button.png",MEDIUM_BUTTON_HOVERED:"medium_button_hover.png",HARD_BUTTON:"hard_button.png",HARD_BUTTON_HOVERED:"hard_button_hover.png",BACK_BUTTON:"back_button.png",BACK_BUTTON_HOVERED:"back_button_hover.png",CONTINUE_BUTTON:"continue_button.png",CONTINUE_BUTTON_HOVERED:"continue_button_hover.png",INSANE_BUTTON:"insane_button.png",INSANE_BUTTON_HOVERED:"insane_button_hover.png",ABOUT_BUTTON:"about_button.png",ABOUT_BUTTON_HOVERED:"about_button_hover.png",CONTROLS:"controls.png"},AUDIO_BASE_PATH:"assets/sounds/",STICK_MOVEMENT_PER_FRAME:2,STICK_MAX_DISTANCE:130,SHOOT_MOUSE_BUTTON:0,INCREASE_SHOT_POWER_KEY:87,DECREASE_SHOT_POWER_KEY:83}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=s(0);e.Assets=new class{constructor(){this.sprites=new Map}async loadGameAssets(){await this.loadGameSprites()}getSprite(t){return this.sprites.get(t)}loadSprite(t){const e=new Image;return this.sprites.set(t,e),new Promise(s=>{e.onload=(()=>s()),e.src=n.GAME_CONFIG.SPRITES_BASE_PATH+t})}async loadGameSprites(){const t=Object.values(n.GAME_CONFIG.SPRITES).map(this.loadSprite.bind(this));await Promise.all(t)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=s(0),o=s(5);const i=document.getElementById("screen"),a=document.getElementById("gameArea");e.Canvas2D=new class{get scaleX(){return this._scale.x}get scaleY(){return this._scale.y}get offsetX(){return this._offset.x}get offsetY(){return this._offset.y}constructor(t,e){this._canvasContainer=e,this._canvas=t,this._context=this._canvas.getContext("2d"),this.resizeCanvas()}resizeCanvas(){const t=n.GAME_CONFIG.GAME_WIDTH,e=n.GAME_CONFIG.GAME_HEIGHT,s=t/e;let i=window.innerHeight,a=window.innerWidth;a/i>s?a=i*s:i=a/s,this._canvasContainer.style.width=a+"px",this._canvasContainer.style.height=i+"px",this._canvasContainer.style.marginTop=(window.innerHeight-i)/2+"px",this._canvasContainer.style.marginLeft=(window.innerWidth-a)/2+"px",this._canvasContainer.style.marginBottom=(window.innerHeight-i)/2+"px",this._canvasContainer.style.marginRight=(window.innerWidth-a)/2+"px",this._scale=new o.Vector2(a/t,i/e),this._canvas.width=a,this._canvas.height=i,this._canvas.offsetParent&&(this._offset=new o.Vector2(this._canvas.offsetLeft,this._canvas.offsetTop))}clear(){this._context.clearRect(0,0,this._canvas.width,this._canvas.height)}drawImage(t,e=o.Vector2.zero,s=0,n=o.Vector2.zero){this._context.save(),this._context.scale(this._scale.x,this._scale.y),this._context.translate(e.x,e.y),this._context.rotate(s),this._context.drawImage(t,0,0,t.width,t.height,-n.x,-n.y,t.width,t.height),this._context.restore()}drawText(t,e,s,n,o="left"){this._context.save(),this._context.fillStyle=s,this._context.font=e,this._context.textAlign=o,this._context.fillText(t,n.x,n.y),this._context.restore()}}(i,a),window.addEventListener("resize",e.Canvas2D.resizeCanvas.bind(e.Canvas2D))},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=s(1),o=s(4),i=s(6),a=s(2),r=s(10);let _;function c(){_.update(),i.Keyboard.reset(),r.Mouse.reset(),a.Canvas2D.clear(),_.draw(),requestAnimationFrame(c)}!async function(){await n.Assets.loadGameAssets(),_=new o.GameWorld,c()}()},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=s(9),o=s(8),i=s(5),a=s(0),r=s(1),_=s(2),c=s(7),u=s(10);e.GameWorld=class{constructor(){this._redBalls=a.GAME_CONFIG.RED_BALLS_POSITIONS.map(t=>new c.Ball(i.Vector2.copy(t),o.Color.yellow)),this._yellowBalls=a.GAME_CONFIG.YELLOW_BALLS_POSITIONS.map(t=>new c.Ball(i.Vector2.copy(t),o.Color.red)),this._cueBall=new c.Ball(i.Vector2.copy(a.GAME_CONFIG.CUE_BALL_POSITION),o.Color.white),this._8Ball=new c.Ball(i.Vector2.copy(a.GAME_CONFIG.EIGHT_BALL_POSITION),o.Color.black),this._stick=new n.Stick(i.Vector2.copy(a.GAME_CONFIG.CUE_BALL_POSITION))}handleInput(){u.Mouse.isPressed(a.GAME_CONFIG.SHOOT_MOUSE_BUTTON)&&this._cueBall.shoot(this._stick.distance,this._stick.rotation)}update(){this.handleInput(),this._stick.update(),this._cueBall.update(),this._redBalls.forEach(t=>t.update()),this._yellowBalls.forEach(t=>t.update()),this._8Ball.update()}draw(){_.Canvas2D.drawImage(r.Assets.getSprite(a.GAME_CONFIG.SPRITES.TABLE)),this._redBalls.forEach(t=>t.draw()),this._yellowBalls.forEach(t=>t.draw()),this._cueBall.draw(),this._8Ball.draw(),this._stick.draw()}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class n{constructor(t,e){this._x=t,this._y=e}get x(){return this._x}get y(){return this._y}static get zero(){return new n(0,0)}static copy(t){return new n(t.x,t.y)}addX(t){return new n(this._x,this._y).addToX(t)}addY(t){return new n(this._x,this._y).addToY(t)}addToX(t){return this._x+=t,this}addToY(t){return this._y+=t,this}addTo(t){return this.addToX(t.x).addToY(t.y)}add(t,e){return this.addToX(t),this.addToY(e),this}}e.Vector2=n},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=s(11);e.Keyboard=new class{constructor(){this._keyStates=[];for(let t=0;t<256;t++)this._keyStates[t]=new n.ButtonState;document.addEventListener("keyup",t=>this.handleKeyUp(t)),document.addEventListener("keydown",t=>this.handleKeyDown(t))}handleKeyUp(t){this._keyStates[t.keyCode].down=!1}handleKeyDown(t){this._keyStates[t.keyCode].pressed=!1,this._keyStates[t.keyCode].down=!0}reset(){for(let t=0;t<256;t++)this._keyStates[t].pressed=!1}isDown(t){return this._keyStates[t].down}isPressed(t){return this._keyStates[t].pressed}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=s(0),o=s(2),i=s(8),a=s(5),r=s(1);e.Ball=class{constructor(t,e){this._position=t,this.resolveSprite(e),this._velocity=a.Vector2.zero,this._moving=!1}resolveSprite(t){switch(t){case i.Color.white:this._sprite=r.Assets.getSprite(n.GAME_CONFIG.SPRITES.CUE_BALL);break;case i.Color.black:this._sprite=r.Assets.getSprite(n.GAME_CONFIG.SPRITES.BLACK_BALL);break;case i.Color.red:this._sprite=r.Assets.getSprite(n.GAME_CONFIG.SPRITES.RED_BALL);break;case i.Color.yellow:this._sprite=r.Assets.getSprite(n.GAME_CONFIG.SPRITES.YELLOW_BALL)}}shoot(t,e){this._velocity=new a.Vector2(t*Math.cos(e),t*Math.sin(e)),this._moving=!0}update(){this._position.addTo(this._velocity)}draw(){o.Canvas2D.drawImage(this._sprite,this._position,0,n.GAME_CONFIG.BALL_ORIGIN)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.white=0]="white",t[t.black=1]="black",t[t.red=2]="red",t[t.yellow=3]="yellow"}(e.Color||(e.Color={}))},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=s(6),o=s(10),i=s(0),a=s(1),r=s(2),_=s(5);e.Stick=class{constructor(t){this._position=t,this._distance=0,this._sprite=a.Assets.getSprite(i.GAME_CONFIG.SPRITES.STICK),this._origin=_.Vector2.copy(i.GAME_CONFIG.STICK_ORIGIN)}get rotation(){return this._rotation}get distance(){return this._distance}increaseDistance(){this._distance+=i.GAME_CONFIG.STICK_MOVEMENT_PER_FRAME,this._origin.addToX(i.GAME_CONFIG.STICK_MOVEMENT_PER_FRAME)}decreaseDistance(){this._distance-=i.GAME_CONFIG.STICK_MOVEMENT_PER_FRAME,this._origin.addToX(-i.GAME_CONFIG.STICK_MOVEMENT_PER_FRAME)}isLessThanMaxDistance(){return this._distance<i.GAME_CONFIG.STICK_MAX_DISTANCE}isMoreThanMinDistance(){return this._distance>=0}updateDistance(){n.Keyboard.isDown(i.GAME_CONFIG.INCREASE_SHOT_POWER_KEY)&&this.isLessThanMaxDistance()?this.increaseDistance():n.Keyboard.isDown(i.GAME_CONFIG.DECREASE_SHOT_POWER_KEY)&&this.isMoreThanMinDistance()&&this.decreaseDistance()}updateRotation(){const t=o.Mouse.posY-this._position.y,e=o.Mouse.posX-this._position.x;this._rotation=Math.atan2(t,e)}update(){this.updateRotation(),this.updateDistance()}draw(){r.Canvas2D.drawImage(this._sprite,this._position,this._rotation,this._origin)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=s(11),o=s(2),i=s(5);e.Mouse=new class{constructor(){this._buttonStates=[];for(let t=0;t<3;t++)this._buttonStates[t]=new n.ButtonState;this._position=i.Vector2.zero,document.addEventListener("mousemove",t=>this.handleMouseMove(t)),document.addEventListener("mousedown",t=>this.handleMouseDown(t)),document.addEventListener("mouseup",t=>this.handleMouseUp(t))}get posX(){return this._position.x}get posY(){return this._position.y}handleMouseMove(t){const e=(t.pageX-o.Canvas2D.offsetX)/o.Canvas2D.scaleX,s=(t.pageY-o.Canvas2D.offsetY)/o.Canvas2D.scaleY;this._position=new i.Vector2(e,s)}handleMouseDown(t){this._buttonStates[t.button].down=!0,this._buttonStates[t.button].pressed=!0}handleMouseUp(t){this._buttonStates[t.button].down=!1}reset(){for(let t=0;t<3;t++)this._buttonStates[t].pressed=!1}isDown(t){return this._buttonStates[t].down}isPressed(t){return this._buttonStates[t].pressed}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.ButtonState=class{constructor(){this.down=!1,this.pressed=!1}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUuY29uZmlnLnRzIiwid2VicGFjazovLy8uL3NyYy9Bc3NldHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NhbnZhcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvR2FtZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZS1vYmplY3RzL0dhbWVXb3JsZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2VvbS9WZWN0b3IyLnRzIiwid2VicGFjazovLy8uL3NyYy9pbnB1dC9LZXlib2FyZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZS1vYmplY3RzL0JhbGwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9Db2xvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZS1vYmplY3RzL1N0aWNrLnRzIiwid2VicGFjazovLy8uL3NyYy9pbnB1dC9Nb3VzZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5wdXQvQnV0dG9uU3RhdGUudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJHQU1FX0NPTkZJRyIsIkdBTUVfV0lEVEgiLCJHQU1FX0hFSUdIVCIsIlJFRF9CQUxMU19QT1NJVElPTlMiLCJ4IiwieSIsIllFTExPV19CQUxMU19QT1NJVElPTlMiLCJDVUVfQkFMTF9QT1NJVElPTiIsIkVJR0hUX0JBTExfUE9TSVRJT04iLCJCQUxMX09SSUdJTiIsIlNUSUNLX09SSUdJTiIsIlNQUklURVNfQkFTRV9QQVRIIiwiU1BSSVRFUyIsIk1BSU5fTUVOVV9CQUNLR1JPVU5EIiwiVEFCTEUiLCJDVUVfQkFMTCIsIlJFRF9CQUxMIiwiWUVMTE9XX0JBTEwiLCJCTEFDS19CQUxMIiwiU1RJQ0siLCJUV09fUExBWUVSU19CVVRUT04iLCJUV09fUExBWUVSU19CVVRUT05fSE9WRVJFRCIsIk9ORV9QTEFZRVJfQlVUVE9OIiwiT05FX1BMQVlFUl9CVVRUT05fSE9WRVJFRCIsIk1VVEVfQlVUVE9OIiwiTVVURV9CVVRUT05fSE9WRVJFRCIsIk1VVEVfQlVUVE9OX1BSRVNTRUQiLCJNVVRFX0JVVFRPTl9QUkVTU0VEX0hPVkVSRUQiLCJFQVNZX0JVVFRPTiIsIkVBU1lfQlVUVE9OX0hPVkVSRUQiLCJNRURJVU1fQlVUVE9OIiwiTUVESVVNX0JVVFRPTl9IT1ZFUkVEIiwiSEFSRF9CVVRUT04iLCJIQVJEX0JVVFRPTl9IT1ZFUkVEIiwiQkFDS19CVVRUT04iLCJCQUNLX0JVVFRPTl9IT1ZFUkVEIiwiQ09OVElOVUVfQlVUVE9OIiwiQ09OVElOVUVfQlVUVE9OX0hPVkVSRUQiLCJJTlNBTkVfQlVUVE9OIiwiSU5TQU5FX0JVVFRPTl9IT1ZFUkVEIiwiQUJPVVRfQlVUVE9OIiwiQUJPVVRfQlVUVE9OX0hPVkVSRUQiLCJDT05UUk9MUyIsIkFVRElPX0JBU0VfUEFUSCIsIlNUSUNLX01PVkVNRU5UX1BFUl9GUkFNRSIsIlNUSUNLX01BWF9ESVNUQU5DRSIsIlNIT09UX01PVVNFX0JVVFRPTiIsIklOQ1JFQVNFX1NIT1RfUE9XRVJfS0VZIiwiREVDUkVBU0VfU0hPVF9QT1dFUl9LRVkiLCJnYW1lX2NvbmZpZ18xIiwiQXNzZXRzIiwiW29iamVjdCBPYmplY3RdIiwidGhpcyIsInNwcml0ZXMiLCJNYXAiLCJsb2FkR2FtZVNwcml0ZXMiLCJwYXRoIiwiaW1nIiwiSW1hZ2UiLCJzZXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm9ubG9hZCIsInNyYyIsImxvYWRQcm9taXNlcyIsInZhbHVlcyIsIm1hcCIsImxvYWRTcHJpdGUiLCJhbGwiLCJWZWN0b3IyXzEiLCJjYW52YXMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY29udGFpbmVyIiwiQ2FudmFzMkQiLCJzY2FsZVgiLCJfc2NhbGUiLCJzY2FsZVkiLCJvZmZzZXRYIiwiX29mZnNldCIsIm9mZnNldFkiLCJjYW52YXNDb250YWluZXIiLCJfY2FudmFzQ29udGFpbmVyIiwiX2NhbnZhcyIsIl9jb250ZXh0IiwiZ2V0Q29udGV4dCIsInJlc2l6ZUNhbnZhcyIsIm9yaWdpbmFsQ2FudmFzV2lkdGgiLCJvcmlnaW5hbENhbnZhc0hlaWdodCIsIndpZHRoVG9IZWlnaHQiLCJuZXdIZWlnaHQiLCJ3aW5kb3ciLCJpbm5lckhlaWdodCIsIm5ld1dpZHRoIiwiaW5uZXJXaWR0aCIsInN0eWxlIiwid2lkdGgiLCJoZWlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5MZWZ0IiwibWFyZ2luQm90dG9tIiwibWFyZ2luUmlnaHQiLCJWZWN0b3IyIiwib2Zmc2V0UGFyZW50Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsImNsZWFyUmVjdCIsInNwcml0ZSIsInBvc2l0aW9uIiwiemVybyIsInJvdGF0aW9uIiwib3JpZ2luIiwic2F2ZSIsInNjYWxlIiwidHJhbnNsYXRlIiwicm90YXRlIiwiZHJhd0ltYWdlIiwicmVzdG9yZSIsInRleHQiLCJmb250IiwiY29sb3IiLCJ0ZXh0QWxpZ24iLCJmaWxsU3R5bGUiLCJmaWxsVGV4dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJBc3NldHNfMSIsIkdhbWVXb3JsZF8xIiwiS2V5Ym9hcmRfMSIsIkNhbnZhc18xIiwiTW91c2VfMSIsInBvb2xHYW1lIiwiZ2FtZUxvb3AiLCJ1cGRhdGUiLCJLZXlib2FyZCIsInJlc2V0IiwiTW91c2UiLCJjbGVhciIsImRyYXciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJhc3luYyIsImxvYWRHYW1lQXNzZXRzIiwiR2FtZVdvcmxkIiwiaW5pdEdhbWUiLCJTdGlja18xIiwiQ29sb3JfMSIsIkJhbGxfMSIsIl9yZWRCYWxscyIsIkJhbGwiLCJjb3B5IiwiQ29sb3IiLCJ5ZWxsb3ciLCJfeWVsbG93QmFsbHMiLCJyZWQiLCJfY3VlQmFsbCIsIndoaXRlIiwiXzhCYWxsIiwiYmxhY2siLCJfc3RpY2siLCJTdGljayIsImlzUHJlc3NlZCIsInNob290IiwiZGlzdGFuY2UiLCJoYW5kbGVJbnB1dCIsImZvckVhY2giLCJiYWxsIiwiZ2V0U3ByaXRlIiwiX3giLCJfeSIsInZlY3RvciIsImFkZFRvWCIsImFkZFRvWSIsIkJ1dHRvblN0YXRlXzEiLCJfa2V5U3RhdGVzIiwiQnV0dG9uU3RhdGUiLCJldmVudCIsImhhbmRsZUtleVVwIiwiaGFuZGxlS2V5RG93biIsImtleUNvZGUiLCJkb3duIiwicHJlc3NlZCIsIl9wb3NpdGlvbiIsInJlc29sdmVTcHJpdGUiLCJfdmVsb2NpdHkiLCJfbW92aW5nIiwiX3Nwcml0ZSIsInBvd2VyIiwiYW5nbGUiLCJNYXRoIiwiY29zIiwic2luIiwiYWRkVG8iLCJfZGlzdGFuY2UiLCJfb3JpZ2luIiwiX3JvdGF0aW9uIiwiaXNEb3duIiwiaXNMZXNzVGhhbk1heERpc3RhbmNlIiwiaW5jcmVhc2VEaXN0YW5jZSIsImlzTW9yZVRoYW5NaW5EaXN0YW5jZSIsImRlY3JlYXNlRGlzdGFuY2UiLCJvcHBvc2l0ZSIsInBvc1kiLCJhZGphY2VudCIsInBvc1giLCJhdGFuMiIsInVwZGF0ZVJvdGF0aW9uIiwidXBkYXRlRGlzdGFuY2UiLCJfYnV0dG9uU3RhdGVzIiwiaGFuZGxlTW91c2VNb3ZlIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlTW91c2VVcCIsIm1vdXNlWCIsInBhZ2VYIiwibW91c2VZIiwicGFnZVkiLCJidXR0b24iXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFG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QUFJLElBQUluRixFQUFJLEVBQUlBLEVBQUksRUFBSUEsSUFDcEJvRixLQUFLMEosY0FBYzlPLEdBQUdtTixTQUFVLEVBSWpDaEksT0FBT21LLEdBQ1YsT0FBT2xLLEtBQUswSixjQUFjUSxHQUFRcEMsS0FHL0IvSCxVQUFVbUssR0FDYixPQUFPbEssS0FBSzBKLGNBQWNRLEdBQVFuQyx5RkN2RDFDck4sRUFBQStNLFlBQUEsTUFLSTFILGNBSE9DLEtBQUE4SCxNQUFPLEVBQ1A5SCxLQUFBK0gsU0FBVSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMyk7XG4iLCJleHBvcnQgY29uc3QgR0FNRV9DT05GSUcgOiBhbnkgPSB7XG5cbiAgICAvLyBTSVpJTkdcbiAgICBHQU1FX1dJRFRIOiAxNTAwLFxuICAgIEdBTUVfSEVJR0hUOiA4MjUsXG5cbiAgICAvLyBQT1NJVElPTlNcbiAgICBSRURfQkFMTFNfUE9TSVRJT05TOiBbXG4gICAgICAgIHsgeDogMTA1NiwgeTogNDMzIH0sXG4gICAgICAgIHsgeDogMTA5MCwgeTogMzc0IH0sXG4gICAgICAgIHsgeDogMTEyNiwgeTogMzkzIH0sXG4gICAgICAgIHsgeDogMTEyNiwgeTogNDcyIH0sXG4gICAgICAgIHsgeDogMTE2MiwgeTogMzM1IH0sXG4gICAgICAgIHsgeDogMTE2MiwgeTogMzc0IH0sXG4gICAgICAgIHsgeDogMTE2MiwgeTogNDUyIH0sXG4gICAgXSxcbiAgICBZRUxMT1dfQkFMTFNfUE9TSVRJT05TOiBbXG4gICAgICAgIHsgeDogMTAyMiwgeTogNDEzIH0sXG4gICAgICAgIHsgeDogMTA1NiwgeTogMzkzIH0sXG4gICAgICAgIHsgeDogMTA5MCwgeTogNDUyIH0sXG4gICAgICAgIHsgeDogMTEyNiwgeTogMzU0IH0sXG4gICAgICAgIHsgeDogMTEyNiwgeTogNDMzIH0sXG4gICAgICAgIHsgeDogMTE2MiwgeTogNDEzIH0sXG4gICAgICAgIHsgeDogMTE2MiwgeTogNDkxIH0sXG4gICAgXSxcbiAgICBDVUVfQkFMTF9QT1NJVElPTjogeyB4OiA0MTMsIHk6IDQxMyB9LFxuICAgIEVJR0hUX0JBTExfUE9TSVRJT046IHsgeDogMTA5MCwgeTogNDEzIH0sXG5cbiAgICAvLyBPUklHSU5TXG4gICAgQkFMTF9PUklHSU46IHsgeDogMjUsIHk6IDI1IH0sXG4gICAgU1RJQ0tfT1JJR0lOOiB7IHg6IDk3MCwgeTogMTEgfSxcblxuICAgIC8vIEFTU0VUU1xuICAgIFNQUklURVNfQkFTRV9QQVRIOiAnYXNzZXRzL3Nwcml0ZXMvJyxcbiAgICBTUFJJVEVTOiB7XG4gICAgICAgIE1BSU5fTUVOVV9CQUNLR1JPVU5EIDogXCJtYWluX21lbnVfYmFja2dyb3VuZC5wbmdcIixcbiAgICAgICAgVEFCTEUgOiBcInNwcl9iYWNrZ3JvdW5kNC5wbmdcIixcbiAgICAgICAgQ1VFX0JBTEwgOiBcInNwcl9iYWxsMi5wbmdcIixcbiAgICAgICAgUkVEX0JBTEwgOiBcInNwcl9yZWRCYWxsMi5wbmdcIixcbiAgICAgICAgWUVMTE9XX0JBTEwgOiBcInNwcl95ZWxsb3dCYWxsMi5wbmdcIixcbiAgICAgICAgQkxBQ0tfQkFMTCA6IFwic3ByX2JsYWNrQmFsbDIucG5nXCIsXG4gICAgICAgIFNUSUNLIDogXCJzcHJfc3RpY2sucG5nXCIsXG4gICAgICAgIFRXT19QTEFZRVJTX0JVVFRPTiA6IFwiMl9wbGF5ZXJzX2J1dHRvbi5wbmdcIixcbiAgICAgICAgVFdPX1BMQVlFUlNfQlVUVE9OX0hPVkVSRUQgOiBcIjJfcGxheWVyc19idXR0b25faG92ZXIucG5nXCIsXG4gICAgICAgIE9ORV9QTEFZRVJfQlVUVE9OIDogXCIxX3BsYXllcl9idXR0b24ucG5nXCIsXG4gICAgICAgIE9ORV9QTEFZRVJfQlVUVE9OX0hPVkVSRUQgOiBcIjFfcGxheWVyX2J1dHRvbl9ob3Zlci5wbmdcIixcbiAgICAgICAgTVVURV9CVVRUT04gOiBcIm11dGVfYnV0dG9uLnBuZ1wiLFxuICAgICAgICBNVVRFX0JVVFRPTl9IT1ZFUkVEIDogXCJtdXRlX2J1dHRvbl9ob3Zlci5wbmdcIixcbiAgICAgICAgTVVURV9CVVRUT05fUFJFU1NFRCA6IFwibXV0ZV9idXR0b25fcHJlc3NlZC5wbmdcIixcbiAgICAgICAgTVVURV9CVVRUT05fUFJFU1NFRF9IT1ZFUkVEIDogXCJtdXRlX2J1dHRvbl9wcmVzc2VkX2hvdmVyLnBuZ1wiLFxuICAgICAgICBFQVNZX0JVVFRPTiA6IFwiZWFzeV9idXR0b24ucG5nXCIsXG4gICAgICAgIEVBU1lfQlVUVE9OX0hPVkVSRUQgOiBcImVhc3lfYnV0dG9uX2hvdmVyLnBuZ1wiLFxuICAgICAgICBNRURJVU1fQlVUVE9OIDogXCJtZWRpdW1fYnV0dG9uLnBuZ1wiLFxuICAgICAgICBNRURJVU1fQlVUVE9OX0hPVkVSRUQgOiBcIm1lZGl1bV9idXR0b25faG92ZXIucG5nXCIsXG4gICAgICAgIEhBUkRfQlVUVE9OIDogXCJoYXJkX2J1dHRvbi5wbmdcIixcbiAgICAgICAgSEFSRF9CVVRUT05fSE9WRVJFRCA6IFwiaGFyZF9idXR0b25faG92ZXIucG5nXCIsXG4gICAgICAgIEJBQ0tfQlVUVE9OIDogXCJiYWNrX2J1dHRvbi5wbmdcIixcbiAgICAgICAgQkFDS19CVVRUT05fSE9WRVJFRCA6IFwiYmFja19idXR0b25faG92ZXIucG5nXCIsXG4gICAgICAgIENPTlRJTlVFX0JVVFRPTiA6IFwiY29udGludWVfYnV0dG9uLnBuZ1wiLFxuICAgICAgICBDT05USU5VRV9CVVRUT05fSE9WRVJFRCA6IFwiY29udGludWVfYnV0dG9uX2hvdmVyLnBuZ1wiLFxuICAgICAgICBJTlNBTkVfQlVUVE9OIDogXCJpbnNhbmVfYnV0dG9uLnBuZ1wiLFxuICAgICAgICBJTlNBTkVfQlVUVE9OX0hPVkVSRUQgOiBcImluc2FuZV9idXR0b25faG92ZXIucG5nXCIsXG4gICAgICAgIEFCT1VUX0JVVFRPTiA6IFwiYWJvdXRfYnV0dG9uLnBuZ1wiLFxuICAgICAgICBBQk9VVF9CVVRUT05fSE9WRVJFRCA6IFwiYWJvdXRfYnV0dG9uX2hvdmVyLnBuZ1wiLFxuICAgICAgICBDT05UUk9MUyA6IFwiY29udHJvbHMucG5nXCIsXG4gICAgfSxcbiAgICBBVURJT19CQVNFX1BBVEg6ICdhc3NldHMvc291bmRzLycsXG5cbiAgICAvLyBTVElDS1xuICAgIFNUSUNLX01PVkVNRU5UX1BFUl9GUkFNRTogMixcbiAgICBTVElDS19NQVhfRElTVEFOQ0U6IDEzMCxcblxuICAgIC8vIEtFWVNcbiAgICBTSE9PVF9NT1VTRV9CVVRUT046IDAsXG4gICAgSU5DUkVBU0VfU0hPVF9QT1dFUl9LRVk6IDg3LFxuICAgIERFQ1JFQVNFX1NIT1RfUE9XRVJfS0VZOiA4Myxcbn07XG4iLCJpbXBvcnQgeyBHQU1FX0NPTkZJRyB9IGZyb20gJy4vZ2FtZS5jb25maWcnO1xuXG5jbGFzcyBBc3NldHNfU2luZ2xldG9uIHtcblxuICAgIHNwcml0ZXM6IE1hcDxzdHJpbmcsIEhUTUxJbWFnZUVsZW1lbnQ+O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3ByaXRlcyA9IG5ldyBNYXA8c3RyaW5nLCBIVE1MSW1hZ2VFbGVtZW50PigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBsb2FkR2FtZUFzc2V0cygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkR2FtZVNwcml0ZXMoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U3ByaXRlKGtleTogc3RyaW5nKTogSFRNTEltYWdlRWxlbWVudHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ByaXRlcy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWRTcHJpdGUocGF0aDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICB0aGlzLnNwcml0ZXMuc2V0KHBhdGgsIGltZyk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHJlc29sdmUoKTtcbiAgICAgICAgICAgIGltZy5zcmMgPSBHQU1FX0NPTkZJRy5TUFJJVEVTX0JBU0VfUEFUSCArIHBhdGg7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIGFzeW5jIGxvYWRHYW1lU3ByaXRlcygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgbG9hZFByb21pc2VzID0gT2JqZWN0LnZhbHVlcyhHQU1FX0NPTkZJRy5TUFJJVEVTKS5tYXAodGhpcy5sb2FkU3ByaXRlLmJpbmQodGhpcykpO1xuXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGxvYWRQcm9taXNlcyk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBjb25zdCBBc3NldHMgPSBuZXcgQXNzZXRzX1NpbmdsZXRvbigpOyIsImltcG9ydCB7IEdBTUVfQ09ORklHIH0gZnJvbSAnLi9nYW1lLmNvbmZpZyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi9nZW9tL1ZlY3RvcjInO1xuXG5jbGFzcyBDYW52YXMyRF9TaW5nbGV0b24ge1xuXG4gICAgLy8tLS0tLS1NZW1iZXJzLS0tLS0tLy9cblxuICAgIHByaXZhdGUgX2NhbnZhc0NvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfY2FudmFzIDogSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfY29udGV4dCA6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgICBwcml2YXRlIF9kcGk6IG51bWJlcjtcbiAgICBwcml2YXRlIF9zY2FsZTogVmVjdG9yMjtcbiAgICBwcml2YXRlIF9vZmZzZXQ6IFZlY3RvcjI7XG5cbiAgICAvLy0tLS0tLVByb3BlcnRpZXMtLS0tLS0vL1xuICAgIHB1YmxpYyBnZXQgc2NhbGVYKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2NhbGUueDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHNjYWxlWSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NjYWxlLnk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBvZmZzZXRYKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb2Zmc2V0Lng7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBvZmZzZXRZKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb2Zmc2V0Lnk7XG4gICAgfVxuXG4gICAgLy8tLS0tLS1Db25zdHJ1Y3Rvci0tLS0tLS8vXG5cbiAgICBjb25zdHJ1Y3RvcihjYW52YXMgOiBIVE1MQ2FudmFzRWxlbWVudCwgY2FudmFzQ29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xuICAgICAgICB0aGlzLl9jYW52YXNDb250YWluZXIgPSBjYW52YXNDb250YWluZXI7XG4gICAgICAgIHRoaXMuX2NhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IHRoaXMuX2NhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICB0aGlzLnJlc2l6ZUNhbnZhcygpO1xuICAgIH1cblxuICAgIC8vLS0tLS0tUHVibGljIE1ldGhvZHMtLS0tLS0vL1xuXG4gICAgcHVibGljIHJlc2l6ZUNhbnZhcygpOiB2b2lkIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsQ2FudmFzV2lkdGggPSBHQU1FX0NPTkZJRy5HQU1FX1dJRFRIO1xuICAgICAgICBjb25zdCBvcmlnaW5hbENhbnZhc0hlaWdodCA9IEdBTUVfQ09ORklHLkdBTUVfSEVJR0hUO1xuICAgICAgICBjb25zdCB3aWR0aFRvSGVpZ2h0OiBudW1iZXIgPSBvcmlnaW5hbENhbnZhc1dpZHRoIC8gb3JpZ2luYWxDYW52YXNIZWlnaHQ7XG5cbiAgICAgICAgbGV0IG5ld0hlaWdodDogbnVtYmVyID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICBsZXQgbmV3V2lkdGg6IG51bWJlciA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgIFxuICAgICAgICBjb25zdCBuZXdXaWR0aFRvSGVpZ2h0OiBudW1iZXIgPSBuZXdXaWR0aCAvIG5ld0hlaWdodDtcblxuICAgICAgICBpZiAobmV3V2lkdGhUb0hlaWdodCA+IHdpZHRoVG9IZWlnaHQpIHtcbiAgICAgICAgICAgIG5ld1dpZHRoID0gbmV3SGVpZ2h0ICogd2lkdGhUb0hlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0hlaWdodCA9IG5ld1dpZHRoIC8gd2lkdGhUb0hlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5fY2FudmFzQ29udGFpbmVyLnN0eWxlLndpZHRoID0gbmV3V2lkdGggKyAncHgnO1xuICAgICAgICB0aGlzLl9jYW52YXNDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gbmV3SGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgdGhpcy5fY2FudmFzQ29udGFpbmVyLnN0eWxlLm1hcmdpblRvcCA9ICh3aW5kb3cuaW5uZXJIZWlnaHQgLSBuZXdIZWlnaHQpIC8gMiArICdweCc7XG4gICAgICAgIHRoaXMuX2NhbnZhc0NvbnRhaW5lci5zdHlsZS5tYXJnaW5MZWZ0ID0gKHdpbmRvdy5pbm5lcldpZHRoIC0gbmV3V2lkdGgpIC8gMiArICdweCc7XG4gICAgICAgIHRoaXMuX2NhbnZhc0NvbnRhaW5lci5zdHlsZS5tYXJnaW5Cb3R0b20gPSAod2luZG93LmlubmVySGVpZ2h0IC0gbmV3SGVpZ2h0KSAvIDIgKyAncHgnO1xuICAgICAgICB0aGlzLl9jYW52YXNDb250YWluZXIuc3R5bGUubWFyZ2luUmlnaHQgPSAod2luZG93LmlubmVyV2lkdGggLSBuZXdXaWR0aCkgLyAyICsgJ3B4JztcbiAgICAgICAgdGhpcy5fc2NhbGUgPSBuZXcgVmVjdG9yMihuZXdXaWR0aCAvIG9yaWdpbmFsQ2FudmFzV2lkdGgsIG5ld0hlaWdodCAvIG9yaWdpbmFsQ2FudmFzSGVpZ2h0KTtcblxuICAgICAgICB0aGlzLl9jYW52YXMud2lkdGggPSBuZXdXaWR0aDtcbiAgICAgICAgdGhpcy5fY2FudmFzLmhlaWdodCA9IG5ld0hlaWdodDtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLl9jYW52YXMub2Zmc2V0UGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBuZXcgVmVjdG9yMih0aGlzLl9jYW52YXMub2Zmc2V0TGVmdCwgdGhpcy5fY2FudmFzLm9mZnNldFRvcCk7XG4gICAgICAgIH1cblxuICAgIH1cblxuXG4gICAgcHVibGljIGNsZWFyKCkgOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5fY2FudmFzLndpZHRoLCB0aGlzLl9jYW52YXMuaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhd0ltYWdlKFxuICAgICAgICAgICAgc3ByaXRlOiBIVE1MSW1hZ2VFbGVtZW50LFxuICAgICAgICAgICAgcG9zaXRpb246IFZlY3RvcjIgPSBWZWN0b3IyLnplcm8sIFxuICAgICAgICAgICAgcm90YXRpb246IG51bWJlciA9IDAsIFxuICAgICAgICAgICAgb3JpZ2luOiBWZWN0b3IyID0gVmVjdG9yMi56ZXJvXG4gICAgICAgICkgeyAgICBcbiAgICAgICAgdGhpcy5fY29udGV4dC5zYXZlKCk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuc2NhbGUodGhpcy5fc2NhbGUueCwgdGhpcy5fc2NhbGUueSk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQudHJhbnNsYXRlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LnJvdGF0ZShyb3RhdGlvbik7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuZHJhd0ltYWdlKHNwcml0ZSwgMCwgMCwgc3ByaXRlLndpZHRoLCBzcHJpdGUuaGVpZ2h0LCAtb3JpZ2luLngsIC1vcmlnaW4ueSwgc3ByaXRlLndpZHRoLCBzcHJpdGUuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5yZXN0b3JlKCk7XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgZHJhd1RleHQodGV4dDogc3RyaW5nLCBmb250OnN0cmluZywgY29sb3I6IHN0cmluZywgcG9zaXRpb246IFZlY3RvcjIsIHRleHRBbGlnbjogc3RyaW5nID0gJ2xlZnQnKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuc2F2ZSgpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmZpbGxTdHlsZSA9IGNvbG9yO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmZvbnQgPSBmb250O1xuICAgICAgICB0aGlzLl9jb250ZXh0LnRleHRBbGlnbiA9IHRleHRBbGlnbiBhcyBDYW52YXNUZXh0QWxpZ247XG4gICAgICAgIHRoaXMuX2NvbnRleHQuZmlsbFRleHQodGV4dCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQucmVzdG9yZSgpO1xuICAgIH1cbn1cblxuY29uc3QgY2FudmFzIDogSFRNTENhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NyZWVuJykgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG5jb25zdCBjb250YWluZXIgOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lQXJlYScpIGFzIEhUTUxFbGVtZW50O1xuZXhwb3J0IGNvbnN0IENhbnZhczJEID0gbmV3IENhbnZhczJEX1NpbmdsZXRvbihjYW52YXMsIGNvbnRhaW5lcik7XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBDYW52YXMyRC5yZXNpemVDYW52YXMuYmluZChDYW52YXMyRCkpO1xuIiwiaW1wb3J0IHsgQXNzZXRzIH0gZnJvbSAnLi9Bc3NldHMnO1xuaW1wb3J0IHsgR2FtZVdvcmxkIH0gZnJvbSAnLi9nYW1lLW9iamVjdHMvR2FtZVdvcmxkJztcbmltcG9ydCB7IEtleWJvYXJkIH0gZnJvbSAnLi9pbnB1dC9LZXlib2FyZCc7XG5pbXBvcnQgeyBDYW52YXMyRCB9IGZyb20gJy4vQ2FudmFzJztcbmltcG9ydCB7IE1vdXNlIH0gZnJvbSAnLi9pbnB1dC9Nb3VzZSc7XG5cbmxldCBwb29sR2FtZTogR2FtZVdvcmxkO1xuXG5hc3luYyBmdW5jdGlvbiBpbml0R2FtZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBBc3NldHMubG9hZEdhbWVBc3NldHMoKTtcblxuICAgIHBvb2xHYW1lID0gbmV3IEdhbWVXb3JsZCgpO1xuICAgIGdhbWVMb29wKCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICBwb29sR2FtZS51cGRhdGUoKTtcbiAgICBLZXlib2FyZC5yZXNldCgpO1xuICAgIE1vdXNlLnJlc2V0KCk7XG59XG5cbmZ1bmN0aW9uIGRyYXcoKTogdm9pZCB7XG4gICAgQ2FudmFzMkQuY2xlYXIoKTtcbiAgICBwb29sR2FtZS5kcmF3KCk7XG59XG5cbmZ1bmN0aW9uIGdhbWVMb29wKCk6IHZvaWQge1xuICAgIHVwZGF0ZSgpO1xuICAgIGRyYXcoKTtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZ2FtZUxvb3ApO1xufVxuXG5pbml0R2FtZSgpOyIsImltcG9ydCB7IFN0aWNrIH0gZnJvbSAnLi9TdGljayc7XG5pbXBvcnQgeyBHYW1lT2JqZWN0IH0gZnJvbSAnLi9HYW1lT2JqZWN0JztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vY29tbW9uL0NvbG9yJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi9nZW9tL1ZlY3RvcjInO1xuaW1wb3J0IHsgR0FNRV9DT05GSUcgfSBmcm9tICcuLi9nYW1lLmNvbmZpZyc7XG5pbXBvcnQgeyBBc3NldHMgfSBmcm9tICcuLi9Bc3NldHMnO1xuaW1wb3J0IHsgQ2FudmFzMkQgfSBmcm9tICcuLi9DYW52YXMnO1xuaW1wb3J0IHsgQmFsbCB9IGZyb20gJy4vQmFsbCc7XG5pbXBvcnQgeyBNb3VzZSB9IGZyb20gJy4uL2lucHV0L01vdXNlJztcblxuZXhwb3J0IGNsYXNzIEdhbWVXb3JsZCBpbXBsZW1lbnRzIEdhbWVPYmplY3Qge1xuXG4gICAgX3N0aWNrOiBTdGljaztcbiAgICBfcmVkQmFsbHM6IEJhbGxbXTtcbiAgICBfeWVsbG93QmFsbHM6IEJhbGxbXTtcbiAgICBfY3VlQmFsbDogQmFsbDtcbiAgICBfOEJhbGw6IEJhbGw7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fcmVkQmFsbHMgPSBHQU1FX0NPTkZJRy5SRURfQkFMTFNfUE9TSVRJT05TXG4gICAgICAgICAgICAubWFwKChwb3NpdGlvbjogVmVjdG9yMikgPT4gbmV3IEJhbGwoVmVjdG9yMi5jb3B5KHBvc2l0aW9uKSwgQ29sb3IueWVsbG93KSk7XG5cbiAgICAgICAgdGhpcy5feWVsbG93QmFsbHMgPSBHQU1FX0NPTkZJRy5ZRUxMT1dfQkFMTFNfUE9TSVRJT05TXG4gICAgICAgICAgICAubWFwKChwb3NpdGlvbjogVmVjdG9yMikgPT4gbmV3IEJhbGwoVmVjdG9yMi5jb3B5KHBvc2l0aW9uKSwgQ29sb3IucmVkKSk7XG5cbiAgICAgICAgdGhpcy5fY3VlQmFsbCA9IG5ldyBCYWxsKFZlY3RvcjIuY29weShHQU1FX0NPTkZJRy5DVUVfQkFMTF9QT1NJVElPTiksIENvbG9yLndoaXRlKTtcbiAgICAgICAgdGhpcy5fOEJhbGwgPSBuZXcgQmFsbChWZWN0b3IyLmNvcHkoR0FNRV9DT05GSUcuRUlHSFRfQkFMTF9QT1NJVElPTiksIENvbG9yLmJsYWNrKTtcblxuICAgICAgICB0aGlzLl9zdGljayA9IG5ldyBTdGljayhWZWN0b3IyLmNvcHkoR0FNRV9DT05GSUcuQ1VFX0JBTExfUE9TSVRJT04pKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaGFuZGxlSW5wdXQoKSB7XG4gICAgICAgIGlmIChNb3VzZS5pc1ByZXNzZWQoR0FNRV9DT05GSUcuU0hPT1RfTU9VU0VfQlVUVE9OKSkge1xuICAgICAgICAgICAgdGhpcy5fY3VlQmFsbC5zaG9vdCh0aGlzLl9zdGljay5kaXN0YW5jZSwgdGhpcy5fc3RpY2sucm90YXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5oYW5kbGVJbnB1dCgpO1xuICAgICAgICB0aGlzLl9zdGljay51cGRhdGUoKTtcbiAgICAgICAgdGhpcy5fY3VlQmFsbC51cGRhdGUoKTtcbiAgICAgICAgdGhpcy5fcmVkQmFsbHMuZm9yRWFjaCgoYmFsbDogQmFsbCkgPT4gYmFsbC51cGRhdGUoKSk7XG4gICAgICAgIHRoaXMuX3llbGxvd0JhbGxzLmZvckVhY2goKGJhbGw6IEJhbGwpID0+IGJhbGwudXBkYXRlKCkpO1xuICAgICAgICB0aGlzLl84QmFsbC51cGRhdGUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdygpOiB2b2lkIHtcbiAgICAgICAgQ2FudmFzMkQuZHJhd0ltYWdlKEFzc2V0cy5nZXRTcHJpdGUoR0FNRV9DT05GSUcuU1BSSVRFUy5UQUJMRSkpO1xuICAgICAgICB0aGlzLl9yZWRCYWxscy5mb3JFYWNoKChiYWxsOiBCYWxsKSA9PiBiYWxsLmRyYXcoKSk7XG4gICAgICAgIHRoaXMuX3llbGxvd0JhbGxzLmZvckVhY2goKGJhbGw6IEJhbGwpID0+IGJhbGwuZHJhdygpKTtcbiAgICAgICAgdGhpcy5fY3VlQmFsbC5kcmF3KCk7XG4gICAgICAgIHRoaXMuXzhCYWxsLmRyYXcoKTtcbiAgICAgICAgdGhpcy5fc3RpY2suZHJhdygpO1xuICAgIH1cbn0iLCJcbmV4cG9ydCBjbGFzcyBWZWN0b3IyIHtcblxuICAgIC8vLS0tLS0tTWVtYmVycy0tLS0tLS8vXG5cbiAgICBwcml2YXRlIF94OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfeTogbnVtYmVyO1xuXG4gICAgLy8tLS0tLS1Db25zdHJ1Y3Rvci0tLS0tLS8vXG5cbiAgICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgfVxuXG4gICAgLy8tLS0tLS1Qcm9wZXJ0aWVzLS0tLS0tLy9cblxuICAgIGdldCB4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5feDtcbiAgICB9XG4gICAgXG4gICAgZ2V0IHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgemVybygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKDAsIDApO1xuICAgIH1cblxuICAgIC8vLS0tLS0tUHVibGljIE1ldGhvZHMtLS0tLS0vL1xuXG4gICAgcHVibGljIHN0YXRpYyBjb3B5KHZlY3RvcjogVmVjdG9yMikge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIodmVjdG9yLngsIHZlY3Rvci55KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkWCh4OiBudW1iZXIpOiBWZWN0b3IyIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHRoaXMuX3gsIHRoaXMuX3kpLmFkZFRvWCh4KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkWSh5OiBudW1iZXIpOiBWZWN0b3IyIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHRoaXMuX3gsIHRoaXMuX3kpLmFkZFRvWSh5KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkVG9YKHg6IG51bWJlcik6IFZlY3RvcjIge1xuICAgICAgICB0aGlzLl94ICs9IHg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGRUb1koeTogbnVtYmVyKTogVmVjdG9yMiB7XG4gICAgICAgIHRoaXMuX3kgKz0geTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZFRvKHZlY3RvcjogVmVjdG9yMik6IFZlY3RvcjIge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRUb1godmVjdG9yLngpLmFkZFRvWSh2ZWN0b3IueSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZCh4IDogbnVtYmVyLCB5OiBudW1iZXIpOiBWZWN0b3Iye1xuICAgICAgICB0aGlzLmFkZFRvWCh4KTtcbiAgICAgICAgdGhpcy5hZGRUb1koeSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBCdXR0b25TdGF0ZSB9IGZyb20gJy4vQnV0dG9uU3RhdGUnO1xuXG5jbGFzcyBLZXlib2FyZF9TaW5nbGV0b24ge1xuXG4gICAgLy8tLS0tLS1NZW1iZXJzLS0tLS0tLy9cblxuICAgIF9rZXlTdGF0ZXMgOiBCdXR0b25TdGF0ZVtdID0gW107XG4gICAgXG4gICAgLy8tLS0tLS1Db25zdHJ1Y3Rvci0tLS0tLS8vXG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgZm9yKGxldCBpID0gMCA7IGkgPCAyNTYgOyBpKysgKSB7XG4gICAgICAgICAgICB0aGlzLl9rZXlTdGF0ZXNbaV0gPSAgbmV3IEJ1dHRvblN0YXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKGV2ZW50KSA9PiB0aGlzLmhhbmRsZUtleVVwKGV2ZW50KSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZlbnQpID0+IHRoaXMuaGFuZGxlS2V5RG93bihldmVudCkpO1xuICAgIH1cblxuICAgIC8vLS0tLS0tUHJpdmF0ZSBNZXRob2RzLS0tLS0tLy9cblxuICAgIHByaXZhdGUgaGFuZGxlS2V5VXAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fa2V5U3RhdGVzW2V2ZW50LmtleUNvZGVdLmRvd24gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUtleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fa2V5U3RhdGVzW2V2ZW50LmtleUNvZGVdLnByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fa2V5U3RhdGVzW2V2ZW50LmtleUNvZGVdLmRvd24gPSB0cnVlO1xuICAgIH1cblxuICAgIC8vLS0tLS0tUHVibGljIE1ldGhvZHMtLS0tLS0vL1xuXG4gICAgcHVibGljIHJlc2V0KCkgOiB2b2lkIHtcbiAgICAgICAgZm9yKGxldCBpID0gMCA7IGkgPCAyNTYgOyBpKysgKSB7XG4gICAgICAgICAgICB0aGlzLl9rZXlTdGF0ZXNbaV0ucHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGlzRG93bihrZXlDb2RlOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleVN0YXRlc1trZXlDb2RlXS5kb3duO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgaXNQcmVzc2VkKGtleUNvZGU6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fa2V5U3RhdGVzW2tleUNvZGVdLnByZXNzZWQ7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgS2V5Ym9hcmQgPSBuZXcgS2V5Ym9hcmRfU2luZ2xldG9uKCk7IiwiaW1wb3J0IHsgR2FtZU9iamVjdCB9IGZyb20gJy4vR2FtZU9iamVjdCc7XG5pbXBvcnQgeyBHQU1FX0NPTkZJRyB9IGZyb20gJy4vLi4vZ2FtZS5jb25maWcnO1xuaW1wb3J0IHsgQ2FudmFzMkQgfSBmcm9tICcuLy4uL0NhbnZhcyc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4vLi4vY29tbW9uL0NvbG9yJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLy4uL2dlb20vVmVjdG9yMic7XG5pbXBvcnQgeyBBc3NldHMgfSBmcm9tICcuLi9Bc3NldHMnO1xuXG5leHBvcnQgY2xhc3MgQmFsbCBpbXBsZW1lbnRzIEdhbWVPYmplY3Qge1xuXG4gICAgcHJpdmF0ZSBfc3ByaXRlOiBIVE1MSW1hZ2VFbGVtZW50O1xuICAgIHByaXZhdGUgX3ZlbG9jaXR5OiBWZWN0b3IyO1xuICAgIHByaXZhdGUgX21vdmluZzogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3Bvc2l0aW9uOiBWZWN0b3IyLCBjb2xvcjogQ29sb3IpIHtcbiAgICAgICAgdGhpcy5yZXNvbHZlU3ByaXRlKGNvbG9yKTtcbiAgICAgICAgdGhpcy5fdmVsb2NpdHkgPSBWZWN0b3IyLnplcm87XG4gICAgICAgIHRoaXMuX21vdmluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzb2x2ZVNwcml0ZShjb2xvcjogQ29sb3IpIHtcbiAgICAgICAgc3dpdGNoKGNvbG9yKSB7XG4gICAgICAgICAgICBjYXNlIENvbG9yLndoaXRlOlxuICAgICAgICAgICAgICAgIHRoaXMuX3Nwcml0ZSA9IEFzc2V0cy5nZXRTcHJpdGUoR0FNRV9DT05GSUcuU1BSSVRFUy5DVUVfQkFMTCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgQ29sb3IuYmxhY2s6XG4gICAgICAgICAgICAgICAgdGhpcy5fc3ByaXRlID0gQXNzZXRzLmdldFNwcml0ZShHQU1FX0NPTkZJRy5TUFJJVEVTLkJMQUNLX0JBTEwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIENvbG9yLnJlZDpcbiAgICAgICAgICAgICAgICB0aGlzLl9zcHJpdGUgPSBBc3NldHMuZ2V0U3ByaXRlKEdBTUVfQ09ORklHLlNQUklURVMuUkVEX0JBTEwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIENvbG9yLnllbGxvdzpcbiAgICAgICAgICAgICAgICB0aGlzLl9zcHJpdGUgPSBBc3NldHMuZ2V0U3ByaXRlKEdBTUVfQ09ORklHLlNQUklURVMuWUVMTE9XX0JBTEwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHNob290KHBvd2VyOiBudW1iZXIsIGFuZ2xlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fdmVsb2NpdHkgPSBuZXcgVmVjdG9yMihwb3dlciAqIE1hdGguY29zKGFuZ2xlKSwgcG93ZXIgKiBNYXRoLnNpbihhbmdsZSkpO1xuICAgICAgICB0aGlzLl9tb3ZpbmcgPSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uLmFkZFRvKHRoaXMuX3ZlbG9jaXR5KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdygpOiB2b2lkIHtcbiAgICAgICAgQ2FudmFzMkQuZHJhd0ltYWdlKHRoaXMuX3Nwcml0ZSwgdGhpcy5fcG9zaXRpb24sIDAsIEdBTUVfQ09ORklHLkJBTExfT1JJR0lOKTtcbiAgICB9XG59IiwiXG5leHBvcnQgZW51bSBDb2xvciB7XG4gICAgd2hpdGUgPSAwLFxuICAgIGJsYWNrID0gMSxcbiAgICByZWQgPSAyLFxuICAgIHllbGxvdyA9IDNcbn0iLCJpbXBvcnQgeyBLZXlib2FyZCB9IGZyb20gJy4vLi4vaW5wdXQvS2V5Ym9hcmQnO1xuaW1wb3J0IHsgTW91c2UgfSBmcm9tICcuLy4uL2lucHV0L01vdXNlJztcbmltcG9ydCB7IEdBTUVfQ09ORklHIH0gZnJvbSAnLi8uLi9nYW1lLmNvbmZpZyc7XG5pbXBvcnQgeyBBc3NldHMgfSBmcm9tICcuLy4uL0Fzc2V0cyc7XG5pbXBvcnQgeyBDYW52YXMyRCB9IGZyb20gJy4vLi4vQ2FudmFzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLy4uL2dlb20vVmVjdG9yMic7XG5pbXBvcnQgeyBHYW1lT2JqZWN0IH0gZnJvbSAnLi9HYW1lT2JqZWN0JztcblxuZXhwb3J0IGNsYXNzIFN0aWNrIGltcGxlbWVudHMgR2FtZU9iamVjdCB7XG5cbiAgICBwcml2YXRlIF9zcHJpdGU6IEhUTUxJbWFnZUVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfcm90YXRpb246IG51bWJlcjtcbiAgICBwcml2YXRlIF9vcmlnaW46IFZlY3RvcjI7XG4gICAgcHJpdmF0ZSBfZGlzdGFuY2U6IG51bWJlciA9IDA7XG5cbiAgICBwdWJsaWMgZ2V0IHJvdGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm90YXRpb247XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBkaXN0YW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3RhbmNlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3Bvc2l0aW9uOiBWZWN0b3IyKSB7XG4gICAgICAgIHRoaXMuX3Nwcml0ZSA9IEFzc2V0cy5nZXRTcHJpdGUoR0FNRV9DT05GSUcuU1BSSVRFUy5TVElDSyk7XG4gICAgICAgIHRoaXMuX29yaWdpbiA9IFZlY3RvcjIuY29weShHQU1FX0NPTkZJRy5TVElDS19PUklHSU4pO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5jcmVhc2VEaXN0YW5jZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fZGlzdGFuY2UgKz0gR0FNRV9DT05GSUcuU1RJQ0tfTU9WRU1FTlRfUEVSX0ZSQU1FO1xuICAgICAgICB0aGlzLl9vcmlnaW4uYWRkVG9YKEdBTUVfQ09ORklHLlNUSUNLX01PVkVNRU5UX1BFUl9GUkFNRSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWNyZWFzZURpc3RhbmNlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9kaXN0YW5jZSAtPSBHQU1FX0NPTkZJRy5TVElDS19NT1ZFTUVOVF9QRVJfRlJBTUU7XG4gICAgICAgIHRoaXMuX29yaWdpbi5hZGRUb1goLUdBTUVfQ09ORklHLlNUSUNLX01PVkVNRU5UX1BFUl9GUkFNRSk7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgaXNMZXNzVGhhbk1heERpc3RhbmNlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzdGFuY2UgPCBHQU1FX0NPTkZJRy5TVElDS19NQVhfRElTVEFOQ0U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc01vcmVUaGFuTWluRGlzdGFuY2UoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXN0YW5jZSA+PSAwO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlRGlzdGFuY2UoKTogdm9pZCB7XG5cbiAgICAgICAgaWYgKEtleWJvYXJkLmlzRG93bihHQU1FX0NPTkZJRy5JTkNSRUFTRV9TSE9UX1BPV0VSX0tFWSkgJiYgdGhpcy5pc0xlc3NUaGFuTWF4RGlzdGFuY2UoKSkge1xuICAgICAgICAgICAgdGhpcy5pbmNyZWFzZURpc3RhbmNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoS2V5Ym9hcmQuaXNEb3duKEdBTUVfQ09ORklHLkRFQ1JFQVNFX1NIT1RfUE9XRVJfS0VZKSAmJiB0aGlzLmlzTW9yZVRoYW5NaW5EaXN0YW5jZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmRlY3JlYXNlRGlzdGFuY2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlUm90YXRpb24oKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG9wcG9zaXRlOiBudW1iZXIgPSBNb3VzZS5wb3NZIC0gdGhpcy5fcG9zaXRpb24ueTtcbiAgICAgICAgY29uc3QgYWRqYWNlbnQ6IG51bWJlciA9IE1vdXNlLnBvc1ggLSB0aGlzLl9wb3NpdGlvbi54O1xuICAgICAgICB0aGlzLl9yb3RhdGlvbiA9IE1hdGguYXRhbjIob3Bwb3NpdGUsIGFkamFjZW50KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnVwZGF0ZVJvdGF0aW9uKCk7XG4gICAgICAgIHRoaXMudXBkYXRlRGlzdGFuY2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdygpOiB2b2lkIHtcbiAgICAgICAgQ2FudmFzMkQuZHJhd0ltYWdlKHRoaXMuX3Nwcml0ZSwgdGhpcy5fcG9zaXRpb24sIHRoaXMuX3JvdGF0aW9uLCB0aGlzLl9vcmlnaW4pO1xuICAgIH1cblxufSIsImltcG9ydCB7IEJ1dHRvblN0YXRlIH0gZnJvbSAnLi9CdXR0b25TdGF0ZSc7XG5pbXBvcnQgeyBDYW52YXMyRCB9IGZyb20gJy4vLi4vQ2FudmFzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLy4uL2dlb20vVmVjdG9yMic7XG5cbmNsYXNzIE1vdXNlX1NpbmdsZXRvbiB7XG5cbiAgICBwcml2YXRlIF9idXR0b25TdGF0ZXM6IEJ1dHRvblN0YXRlW10gPSBbXTtcbiAgICBwcml2YXRlIF9wb3NpdGlvbjogVmVjdG9yMjtcblxuICAgIHB1YmxpYyBnZXQgcG9zWCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uLng7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBwb3NZKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9zaXRpb24ueTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcblxuICAgICAgICBmb3IobGV0IGkgPSAwIDsgaSA8IDMgOyBpICsrICkge1xuICAgICAgICAgICAgdGhpcy5fYnV0dG9uU3RhdGVzW2ldID0gbmV3IEJ1dHRvblN0YXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IFZlY3RvcjIuemVybztcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZXZlbnQpID0+IHRoaXMuaGFuZGxlTW91c2VNb3ZlKGV2ZW50KSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChldmVudCkgPT4gdGhpcy5oYW5kbGVNb3VzZURvd24oZXZlbnQpKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIChldmVudCkgPT4gdGhpcy5oYW5kbGVNb3VzZVVwKGV2ZW50KSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVNb3VzZU1vdmUoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbW91c2VYOiBudW1iZXIgPSAoZXZlbnQucGFnZVggLSBDYW52YXMyRC5vZmZzZXRYKSAvIENhbnZhczJELnNjYWxlWDtcbiAgICAgICAgY29uc3QgbW91c2VZOiBudW1iZXIgPSAoZXZlbnQucGFnZVkgLSBDYW52YXMyRC5vZmZzZXRZKSAvIENhbnZhczJELnNjYWxlWTtcbiAgICAgICAgdGhpcy5fcG9zaXRpb24gPSBuZXcgVmVjdG9yMihtb3VzZVgsIG1vdXNlWSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVNb3VzZURvd24oZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgdGhpcy5fYnV0dG9uU3RhdGVzW2V2ZW50LmJ1dHRvbl0uZG93biA9IHRydWU7XG4gICAgICAgIHRoaXMuX2J1dHRvblN0YXRlc1tldmVudC5idXR0b25dLnByZXNzZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlTW91c2VVcChldmVudDogTW91c2VFdmVudCkge1xuICAgICAgICB0aGlzLl9idXR0b25TdGF0ZXNbZXZlbnQuYnV0dG9uXS5kb3duID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHVibGljIHJlc2V0KCkgOiB2b2lkIHtcbiAgICAgICAgZm9yKGxldCBpID0gMCA7IGkgPCAzIDsgaSsrICkge1xuICAgICAgICAgICAgdGhpcy5fYnV0dG9uU3RhdGVzW2ldLnByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBpc0Rvd24oYnV0dG9uOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1dHRvblN0YXRlc1tidXR0b25dLmRvd247XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBpc1ByZXNzZWQoYnV0dG9uOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1dHRvblN0YXRlc1tidXR0b25dLnByZXNzZWQ7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgTW91c2UgPSBuZXcgTW91c2VfU2luZ2xldG9uKCk7IiwiXG5leHBvcnQgY2xhc3MgQnV0dG9uU3RhdGUge1xuICAgIFxuICAgIHB1YmxpYyBkb3duID0gZmFsc2U7XG4gICAgcHVibGljIHByZXNzZWQgPSBmYWxzZTtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgXG4gICAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0=